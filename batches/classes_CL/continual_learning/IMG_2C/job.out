--------------- /leonardo/prod/opt/modulefiles/deeplrn/libraries ---------------
cineca-ai/3.0.0  cineca-ai/4.0.0  cineca-ai/4.1.1(default)  
cineca-ai/3.0.1  cineca-ai/4.1.0  cineca-ai/4.3.0           

Key:
(symbolic-version)  
BLOCKS:  {'b0': {'arch': 'CNN', 'preset': 'softkrotov-c48-k5-p2-s1-d1-b0-t1.1-lr0.08', 'operation': 'batchnorm2d', 'num': 0, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5}}, 'b1': {'arch': 'CNN', 'preset': 'softkrotov-c192-k3-p1-s1-d1-b0-t0.7-lr0.01', 'operation': 'batchnorm2d', 'num': 1, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3}}, 'b2': {'arch': 'CNN', 'preset': 'softkrotov-c768-k3-p1-s1-d1-b0-t0.5-lr0.01', 'operation': 'batchnorm2d', 'num': 2, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3}}, 'b3': {'arch': 'CNN', 'preset': 'softkrotov-c3072-k3-p1-s1-d1-b0-t0.4-lr0.01', 'operation': 'batchnorm2d', 'num': 3, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 1.4}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3}}, 'b4': {'arch': 'CNN', 'preset': 'softkrotov-c12288-k3-p1-s1-d1-b0-t0.25-lr0.01', 'operation': 'batchnorm2d', 'num': 4, 'batch_norm': False, 'pool': {'type': 'avg', 'kernel_size': 2, 'stride': 2, 'padding': 0}, 'activation': {'function': 'triangle', 'param': 1.0}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3}}, 'b5': {'arch': 'MLP', 'preset': 'BP-c1000', 'operation': 'flatten', 'num': 5, 'att_dropout': None, 'dropout': 0.5, 'layer': {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.25, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 1000}, 'pool': None, 'activation': None}}
CL:  True
{'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 10, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True}
CL:  True
{'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 10, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 2, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=2, bias=True)

 ********** Hebbian Unsupervised learning of blocks [0] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
786
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 786
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1914
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 2.38e-01	time: 00:00:23	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.522e-02/SW:6.562e-01/MR:5.402e+00/SR:1.786e+00/MeD:1.364e+00/MaD:4.400e+00/MW:0.671/MAW:0.329
|       0 |       1 |       2 |       3 |       4 |      5 |       6 |       7 |       8 |       9 |      10 |      11 |     12 |      13 |      14 |     15 |         16 |      17 |      18 |      19 |      20 |      21 |      22 |      23 |      24 |         25 |      26 |      27 |      28 |      29 |
|---------+---------+---------+---------+---------+--------+---------+---------+---------+---------+---------+---------+--------+---------+---------+--------+------------+---------+---------+---------+---------+---------+---------+---------+---------+------------+---------+---------+---------+---------|
|   0.172 |   0.315 |   0.264 |   0.281 |   0.231 |   0.26 |   0.258 |   0.275 |   0.183 |   0.357 |   0.126 |   0.211 |   0.25 |   0.234 |   0.233 |   0.29 |   0.000946 |   0.186 |   0.281 |   0.159 |   0.285 |   0.237 |   0.276 |   0.329 |   0.281 |   0.000815 |   0.261 |   0.137 |   0.213 |   0.309 |
|   3.79  |   7.23  |   5.92  |   6.33  |   5.12  |   5.82 |   5.76  |   6.18  |   4.01  |   8.34  |   2.83  |   4.63  |   5.58 |   5.18  |   5.15  |   6.56 |   1        |   4.08  |   6.34  |   3.5   |   6.43  |   5.26  |   6.2   |   7.59  |   6.34  |   1        |   5.85  |   3.04  |   4.68  |   7.07  |
|   0.92  |   0.63  |   0.4   |   0.91  |   2.49  |   4.76 |   1.54  |   1.23  |   2.32  |   0.48  |   2.44  |   1.23  |   0.98 |   0.58  |   3.75  |   0.6  |   8.33     |   0.79  |   1.25  |   2.26  |   1.26  |   2.76  |   0.8   |   0.74  |   0.91  |  11.93     |   1.01  |   1.48  |   0.66  |   0.51  |
| nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan    | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     |
| nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan    | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     |
| nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan    | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [1] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
786
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 786
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1914
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 2.38e-01	time: 00:00:37	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:-1.020e-03/SW:6.567e-01/MR:1.337e+01/SR:2.757e+00/MeD:2.243e+00/MaD:6.817e+00/MW:0.645/MAW:0.355
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |       8 |        9 |       10 |      11 |       12 |       13 |      14 |       15 |       16 |       17 |     18 |       19 |       20 |       21 |       22 |       23 |       24 |       25 |       26 |       27 |      28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+---------+----------+----------+---------+----------+----------+----------+--------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------|
|   0.0623 |   0.0861 |   0.0809 |   0.0582 |   0.0783 |   0.0482 |   0.0535 |   0.0694 |   0.059 |   0.0785 |   0.0607 |   0.083 |   0.0701 |   0.0743 |   0.079 |   0.0591 |   0.0584 |   0.0362 |   0.08 |   0.0475 |   0.0511 |   0.0736 |   0.0574 |   0.0544 |   0.0645 |   0.0736 |   0.0665 |   0.0624 |   0.079 |   0.0631 |
|  12.46   |  18.65   |  17.23   |  11.47   |  16.56   |   9.15   |  10.35   |  14.24   |  11.67  |  16.61   |  12.08   |  17.79  |  14.42   |  15.49   |  16.74  |  11.68   |  11.53   |   6.55   |  17    |   8.99   |   9.8    |  15.31   |  11.28   |  10.56   |  13.02   |  15.32   |  13.51   |  12.48   |  16.73  |  12.65   |
|   0.68   |   0.36   |   0.25   |   0.85   |   0.14   |   0.92   |   0.49   |   0.35   |   0.45  |   0.17   |   0.86   |   0.26  |   0.23   |   0.26   |   0.25  |   0.61   |   1.11   |   2.3    |   0.25 |   0.98   |   1.26   |   0.28   |   0.36   |   0.59   |   0.41   |   0.22   |   1.13   |   0.36   |   0.2   |   0.3    |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [2] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
786
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 786
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1914
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.08e-01	time: 00:00:50	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:-1.271e-04/SW:4.380e-01/MR:1.793e+01/SR:3.191e+00/MeD:2.587e+00/MaD:9.922e+00/MW:0.595/MAW:0.405
|       0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |       9 |       10 |      11 |       12 |       13 |       14 |       15 |       16 |      17 |      18 |       19 |       20 |       21 |       22 |       23 |      24 |       25 |       26 |       27 |       28 |      29 |
|---------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+---------+----------+----------+----------+----------+----------+---------+---------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+---------|
|   0.102 |   0.0889 |   0.0903 |   0.0852 |   0.0856 |   0.0852 |   0.0895 |   0.0686 |   0.0849 |   0.103 |   0.0848 |   0.079 |   0.0873 |   0.0863 |   0.0782 |   0.0881 |   0.0983 |   0.074 |   0.066 |   0.0726 |   0.0872 |   0.0713 |   0.0694 |   0.0752 |   0.104 |   0.0879 |   0.0935 |   0.0852 |   0.0877 |   0.093 |
|  23.02  |  19.41   |  19.81   |  18.41   |  18.51   |  18.4    |  19.58   |  14.03   |  18.33   |  23.54  |  18.3    |  16.72  |  18.97   |  18.71   |  16.52   |  19.18   |  22.05   |  15.42  |  13.38  |  15.05   |  18.93   |  14.73   |  14.24   |  15.74   |  23.64  |  19.14   |  20.7    |  18.4    |  19.09   |  20.56  |
|   0.04  |   0.12   |   0.07   |   0.07   |   0.11   |   0.06   |   0.07   |   0.15   |   0.09   |   0.02  |   0.06   |   0.14  |   0.08   |   0.07   |   0.09   |   0.06   |   0.03   |   0.14  |   0.24  |   0.13   |   0.07   |   0.15   |   0.3    |   0.2    |   0.03  |   0.12   |   0.11   |   0.06   |   0.06   |   0.04  |
| nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     |
| nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     |
| nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [3] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
786
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 786
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1914
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 9.49e-02	time: 00:01:04	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.190e-04/SW:2.584e-01/MR:2.119e+01/SR:3.540e+00/MeD:2.808e+00/MaD:2.012e+01/MW:0.620/MAW:0.380
|        0 |       1 |        2 |       3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |      15 |       16 |       17 |       18 |       19 |      20 |      21 |       22 |      23 |      24 |      25 |      26 |       27 |      28 |      29 |
|----------+---------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+---------+---------+----------+---------+---------+---------+---------+----------+---------+---------|
|   0.0733 |   0.108 |   0.0985 |   0.108 |   0.0826 |   0.0846 |   0.0884 |   0.0815 |   0.0999 |   0.0965 |   0.0738 |   0.0935 |   0.0993 |   0.0815 |   0.0836 |   0.075 |   0.0876 |   0.0868 |   0.0869 |   0.0806 |   0.105 |   0.108 |   0.0912 |   0.091 |   0.109 |   0.102 |   0.094 |   0.0859 |   0.104 |   0.087 |
|  15.24   |  24.83  |  22.11   |  24.86  |  17.7    |  18.24   |  19.28   |  17.4    |  22.51   |  21.55   |  15.37   |  20.68   |  22.35   |  17.4    |  17.98   |  15.68  |  19.06   |  18.84   |  18.86   |  17.17   |  23.97  |  24.85  |  20.06   |  20     |  25.03  |  22.99  |  20.85  |  18.6    |  23.81  |  18.9   |
|   0.09   |   0     |   0.02   |   0     |   0.05   |   0.11   |   0.03   |   0.06   |   0.01   |   0.01   |   0.06   |   0.02   |   0.01   |   0.05   |   0.06   |   0.07  |   0.05   |   0.03   |   0.02   |   0.05   |   0.01  |   0     |   0.04   |   0.03  |   0     |   0.03  |   0.03  |   0.08   |   0.01  |   0.04  |
| nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan      | nan     | nan     |
| nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan      | nan     | nan     |
| nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan      | nan     | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [4] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
786
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 786
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1914
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 8.32e-02	time: 00:01:28	Acc_train 0.00	Acc_test 0.00	convergence: 2.37e+01	R1: 1	Info MB:0.000e+00/SB:0.000e+00/MW:-1.280e-06/SW:1.495e-01/MR:2.474e+01/SR:2.381e+00/MeD:1.178e+00/MaD:2.374e+01/MW:0.687/MAW:0.313
|       0 |       1 |       2 |       3 |       4 |       5 |       6 |        7 |        8 |       9 |      10 |      11 |       12 |      13 |      14 |       15 |      16 |      17 |      18 |      19 |      20 |      21 |      22 |       23 |     24 |      25 |      26 |      27 |      28 |       29 |
|---------+---------+---------+---------+---------+---------+---------+----------+----------+---------+---------+---------+----------+---------+---------+----------+---------+---------+---------+---------+---------+---------+---------+----------+--------+---------+---------+---------+---------+----------|
|   0.094 |   0.106 |   0.108 |   0.105 |   0.109 |   0.109 |   0.109 |   0.0927 |   0.0893 |   0.108 |   0.109 |   0.108 |   0.0984 |   0.111 |   0.111 |   0.0784 |   0.104 |   0.104 |   0.107 |   0.106 |   0.109 |   0.103 |   0.109 |   0.0923 |   0.11 |   0.109 |   0.103 |   0.105 |   0.108 |   0.0947 |
|  20.83  |  24.36  |  24.74  |  24.09  |  25.02  |  25.2   |  25.03  |  20.48   |  19.52   |  24.96  |  25.07  |  24.88  |  22.08   |  25.76  |  25.62  |  16.57   |  23.83  |  23.81  |  24.72  |  24.43  |  25.25  |  23.32  |  25.2   |  20.36   |  25.34 |  25.28  |  23.42  |  23.88  |  24.92  |  21.05   |
|   0.01  |   0     |   0     |   0     |   0     |   0     |   0     |   0.02   |   0.02   |   0     |   0     |   0     |   0.01   |   0     |   0.01  |   0.03   |   0.01  |   0     |   0     |   0     |   0     |   0.01  |   0     |   0.01   |   0    |   0     |   0     |   0.01  |   0     |   0.01   |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan      | nan     | nan     | nan     | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan    | nan     | nan     | nan     | nan     | nan      |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan      | nan     | nan     | nan     | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan    | nan     | nan     | nan     | nan     | nan      |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan      | nan     | nan     | nan     | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan    | nan     | nan     | nan     | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Supervised learning of blocks [5] **********
SAVING FOLDER FOR SUP:  IMG_2C_CL
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
786
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 786
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1914
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Epoch: [1/50]	lr: 1.00e-03	time: 00:01:42	Loss_train 4.15788	Acc_train 83.07	/	Loss_test 4.02510	Acc_test 85.24
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [10/50]	lr: 1.00e-03	time: 00:02:34	Loss_train 0.75780	Acc_train 96.16	/	Loss_test 3.85203	Acc_test 88.68
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [20/50]	lr: 2.50e-04	time: 00:03:32	Loss_train 0.02552	Acc_train 99.78	/	Loss_test 1.58653	Acc_test 93.77
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [30/50]	lr: 1.25e-04	time: 00:04:29	Loss_train 0.00041	Acc_train 99.98	/	Loss_test 1.64560	Acc_test 93.89
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [40/50]	lr: 3.13e-05	time: 00:05:27	Loss_train 0.00000	Acc_train 100.00	/	Loss_test 1.56089	Acc_test 93.89
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [50/50]	lr: 7.81e-06	time: 00:06:25	Loss_train 0.00038	Acc_train 99.99	/	Loss_test 1.52911	Acc_test 94.02
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
RESULT:  {'train_loss': 0.00037885058554820716, 'train_acc': 99.9947726726532, 'test_loss': 1.5291059017181396, 'test_acc': 94.02035522460938, 'convergence': 23.743215560913086, 'R1': 1, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [0, 8]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [0, 8]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}
IN R1:  {'R1': {'train_loss': 0.00037885058554820716, 'train_acc': 99.9947726726532, 'test_loss': 1.5291059017181396, 'test_acc': 94.02035522460938, 'convergence': 23.743215560913086, 'R1': 1, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [0, 8]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [0, 8]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 2, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 Model IMG_2C_CL loaded successfuly with best perf



 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=2, bias=True)

 ********** Hebbian Unsupervised learning of blocks [0] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
784
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 784
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1916
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.20e-01	time: 00:00:19	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:2.204e-03/SW:3.631e-01/MR:2.882e+00/SR:1.269e+00/MeD:1.053e+00/MaD:2.552e+00/MW:0.735/MAW:0.265
|        0 |       1 |       2 |       3 |       4 |       5 |       6 |       7 |        8 |      9 |        10 |      11 |     12 |      13 |      14 |      15 |         16 |       17 |      18 |        19 |      20 |      21 |      22 |      23 |     24 |         25 |      26 |         27 |       28 |      29 |
|----------+---------+---------+---------+---------+---------+---------+---------+----------+--------+-----------+---------+--------+---------+---------+---------+------------+----------+---------+-----------+---------+---------+---------+---------+--------+------------+---------+------------+----------+---------|
|   0.0523 |   0.171 |   0.143 |   0.128 |   0.118 |   0.131 |   0.162 |   0.203 |   0.0262 |   0.19 |   0.00511 |   0.102 |   0.11 |   0.115 |   0.117 |   0.198 |   2.53e-09 |   0.0545 |   0.134 |   0.00395 |   0.165 |   0.112 |   0.146 |   0.221 |   0.15 |   2.53e-09 |   0.169 |   0.000914 |   0.0489 |   0.204 |
|   1.57   |   3.74  |   3.17  |   2.87  |   2.68  |   2.93  |   3.56  |   4.47  |   1.23   |   4.17 |   1.03    |   2.38  |   2.53 |   2.62  |   2.65  |   4.34  |   1        |   1.6    |   2.99  |   1.02    |   3.64  |   2.56  |   3.23  |   4.87  |   3.31 |   1        |   3.71  |   1        |   1.52   |   4.48  |
|   0.62   |   0.63  |   0.56  |   0.58  |   0.69  |   0.54  |   0.72  |   0.65  |   0.8    |   0.51 |   3.03    |   0.61  |   0.71 |   0.56  |   0.54  |   0.62  |  27.28     |   0.68   |   0.53  |   3.03    |   0.66  |   0.64  |   0.61  |   0.59  |   0.51 |  26.97     |   0.7   |   6.62     |   0.68   |   0.61  |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan    | nan       | nan     | nan    | nan     | nan     | nan     | nan        | nan      | nan     | nan       | nan     | nan     | nan     | nan     | nan    | nan        | nan     | nan        | nan      | nan     |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan    | nan       | nan     | nan    | nan     | nan     | nan     | nan        | nan      | nan     | nan       | nan     | nan     | nan     | nan     | nan    | nan        | nan     | nan        | nan      | nan     |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan    | nan       | nan     | nan    | nan     | nan     | nan     | nan        | nan      | nan     | nan       | nan     | nan     | nan     | nan     | nan    | nan        | nan     | nan        | nan      | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [1] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
784
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 784
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1916
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.20e-01	time: 00:00:32	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:3.595e-03/SW:4.527e-01/MR:9.119e+00/SR:2.328e+00/MeD:1.873e+00/MaD:6.374e+00/MW:0.545/MAW:0.455
|        0 |        1 |        2 |       3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |       17 |       18 |      19 |       20 |       21 |       22 |       23 |       24 |       25 |       26 |       27 |      28 |       29 |
|----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------|
|   0.0548 |   0.0575 |   0.0637 |   0.051 |   0.0487 |   0.0503 |   0.0402 |   0.0492 |   0.0485 |   0.0566 |   0.0417 |   0.0489 |   0.0371 |   0.0557 |   0.0544 |   0.0453 |   0.0566 |   0.0212 |   0.0518 |   0.038 |   0.0369 |   0.0523 |   0.0353 |   0.0414 |   0.0527 |   0.0472 |   0.0743 |   0.0427 |   0.049 |   0.0373 |
|  10.65   |  11.3    |  12.8    |   9.79  |   9.25   |   9.61   |   7.39   |   9.36   |   9.21   |  11.08   |   7.7    |   9.3    |   6.75   |  10.87   |  10.57   |   8.49   |  11.08   |   3.73   |   9.96   |   6.94  |   6.7    |  10.08   |   6.37   |   7.65   |  10.17   |   8.93   |  15.49   |   7.93   |   9.32  |   6.79   |
|   0.26   |   0.43   |   0.2    |   0.66  |   0.33   |   0.61   |   0.27   |   0.61   |   0.15   |   0.2    |   2.53   |   0.56   |   0.44   |   0.44   |   0.48   |   0.29   |   0.16   |   3.72   |   0.29   |   0.32  |   0.59   |   0.24   |   0.26   |   0.21   |   0.16   |   0.26   |   0.81   |   0.28   |   0.64  |   0.31   |
| nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      |
| nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      |
| nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [2] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
784
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 784
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1916
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.08e-01	time: 00:00:44	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.039e-03/SW:3.541e-01/MR:1.442e+01/SR:2.937e+00/MeD:2.289e+00/MaD:1.230e+01/MW:0.563/MAW:0.437
|      0 |        1 |        2 |        3 |       4 |        5 |       6 |        7 |        8 |       9 |      10 |       11 |       12 |       13 |       14 |       15 |      16 |      17 |       18 |       19 |       20 |       21 |       22 |       23 |       24 |       25 |       26 |       27 |       28 |      29 |
|--------+----------+----------+----------+---------+----------+---------+----------+----------+---------+---------+----------+----------+----------+----------+----------+---------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------|
|   0.1  |   0.0744 |   0.0761 |   0.0743 |   0.069 |   0.0738 |   0.077 |   0.0621 |   0.0722 |   0.091 |   0.077 |   0.0784 |   0.0652 |   0.0721 |   0.0713 |   0.0694 |   0.066 |   0.056 |   0.0632 |   0.0657 |   0.0845 |   0.0712 |   0.0594 |   0.0729 |   0.0888 |   0.0662 |   0.0736 |   0.0637 |   0.0661 |   0.067 |
|  22.64 |  15.53   |  15.97   |  15.5    |  14.14  |  15.38   |  16.2   |  12.4    |  14.97   |  20.01  |  16.22  |  16.58   |  13.19   |  14.93   |  14.71   |  14.23   |  13.37  |  10.93  |  12.7    |  13.31   |  18.22   |  14.7    |  11.77   |  15.14   |  19.38   |  13.42   |  15.33   |  12.8    |  13.41   |  13.62  |
|   0.02 |   0.09   |   0.06   |   0.05   |   0.13  |   0.05   |   0.06  |   0.06   |   0.08   |   0.04  |   0.04  |   0.01   |   0.11   |   0.06   |   0.04   |   0.09   |   0.1   |   0.15  |   0.04   |   0.05   |   0.02   |   0.01   |   0.15   |   0.04   |   0.17   |   0.15   |   0.26   |   0.1    |   0.08   |   0.07  |
| nan    | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     |
| nan    | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     |
| nan    | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [3] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
784
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 784
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1916
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 8.39e-02	time: 00:00:59	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:4.044e-04/SW:2.230e-01/MR:1.817e+01/SR:3.709e+00/MeD:2.923e+00/MaD:1.716e+01/MW:0.634/MAW:0.366
|        0 |        1 |        2 |       3 |        4 |        5 |        6 |        7 |       8 |        9 |       10 |       11 |      12 |      13 |       14 |       15 |       16 |       17 |       18 |       19 |       20 |       21 |       22 |      23 |       24 |      25 |      26 |       27 |       28 |       29 |
|----------+----------+----------+---------+----------+----------+----------+----------+---------+----------+----------+----------+---------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+---------+---------+----------+----------+----------|
|   0.0799 |   0.0908 |   0.0954 |   0.103 |   0.0727 |   0.0902 |   0.0791 |   0.0808 |   0.081 |   0.0776 |   0.0746 |   0.0751 |   0.094 |   0.069 |   0.0786 |   0.0742 |   0.0839 |   0.0674 |   0.0719 |   0.0787 |   0.0777 |   0.0983 |   0.0823 |   0.065 |   0.0925 |   0.066 |   0.091 |   0.0891 |   0.0907 |   0.0653 |
|  16.98   |  19.94   |  21.23   |  23.36  |  15.09   |  19.78   |  16.75   |  17.21   |  17.28  |  16.35   |  15.57   |  15.7    |  20.84  |  14.13  |  16.64   |  15.46   |  18.05   |  13.72   |  14.87   |  16.65   |  16.38   |  22.05   |  17.61   |  13.13  |  20.42   |  13.37  |  20.01  |  19.48   |  19.92   |  13.21   |
|   0.02   |   0.02   |   0      |   0.01  |   0.02   |   0.01   |   0.04   |   0.02   |   0.03  |   0.05   |   0      |   0.03   |   0.01  |   0.03  |   0.02   |   0.02   |   0.01   |   0.04   |   0.03   |   0.01   |   0.06   |   0.01   |   0.02   |   0.05  |   0.02   |   0.09  |   0.01  |   0.01   |   0.01   |   0.07   |
| nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan     | nan      | nan      | nan      |
| nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan     | nan      | nan      | nan      |
| nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan     | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [4] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
784
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 784
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1916
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 6.98e-02	time: 00:01:23	Acc_train 0.00	Acc_test 0.00	convergence: 2.36e+01	R1: 3	Info MB:0.000e+00/SB:0.000e+00/MW:5.120e-06/SW:1.492e-01/MR:2.460e+01/SR:3.226e+00/MeD:1.803e+00/MaD:2.360e+01/MW:0.713/MAW:0.287
|        0 |      1 |       2 |       3 |       4 |       5 |      6 |        7 |        8 |       9 |      10 |      11 |      12 |      13 |      14 |       15 |      16 |      17 |      18 |      19 |     20 |      21 |      22 |       23 |     24 |      25 |      26 |      27 |      28 |       29 |
|----------+--------+---------+---------+---------+---------+--------+----------+----------+---------+---------+---------+---------+---------+---------+----------+---------+---------+---------+---------+--------+---------+---------+----------+--------+---------+---------+---------+---------+----------|
|   0.0825 |   0.1  |   0.108 |   0.106 |   0.109 |   0.106 |   0.11 |   0.0917 |   0.0897 |   0.111 |   0.109 |   0.109 |   0.107 |   0.114 |   0.113 |   0.0793 |   0.108 |   0.102 |   0.109 |   0.109 |   0.11 |   0.109 |   0.111 |   0.0927 |   0.11 |   0.112 |   0.103 |   0.105 |   0.106 |   0.0954 |
|  17.68   |  22.62 |  25.02  |  24.39  |  25.09  |  24.2   |  25.52 |  20.19   |  19.65   |  25.65  |  25.31  |  25.09  |  24.58  |  26.53  |  26.26  |  16.8    |  24.81  |  23.12  |  25.14  |  25.05  |  25.56 |  25.05  |  25.63  |  20.48   |  25.41 |  25.92  |  23.39  |  24.07  |  24.39  |  21.23   |
|   0.01   |   0    |   0     |   0     |   0     |   0     |   0    |   0      |   0      |   0     |   0     |   0     |   0.01  |   0     |   0     |   0      |   0     |   0     |   0     |   0     |   0    |   0     |   0     |   0      |   0    |   0.01  |   0     |   0     |   0     |   0      |
| nan      | nan    | nan     | nan     | nan     | nan     | nan    | nan      | nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan      | nan    | nan     | nan     | nan     | nan     | nan      |
| nan      | nan    | nan     | nan     | nan     | nan     | nan    | nan      | nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan      | nan    | nan     | nan     | nan     | nan     | nan      |
| nan      | nan    | nan     | nan     | nan     | nan     | nan    | nan      | nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan      | nan    | nan     | nan     | nan     | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Supervised learning of blocks [5] **********
SAVING FOLDER FOR SUP:  IMG_2C_CL
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
784
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 784
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[5, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1916
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1916
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1916
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Epoch: [1/50]	lr: 1.00e-03	time: 00:01:36	Loss_train 5.76630	Acc_train 89.87	/	Loss_test 2.80421	Acc_test 94.26
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [10/50]	lr: 1.00e-03	time: 00:02:28	Loss_train 0.47590	Acc_train 98.07	/	Loss_test 3.32180	Acc_test 93.49
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [20/50]	lr: 2.50e-04	time: 00:03:26	Loss_train 0.02659	Acc_train 99.75	/	Loss_test 2.73954	Acc_test 95.28
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [30/50]	lr: 1.25e-04	time: 00:04:24	Loss_train 0.00044	Acc_train 99.99	/	Loss_test 2.52471	Acc_test 94.77
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [40/50]	lr: 3.13e-05	time: 00:05:22	Loss_train 0.00000	Acc_train 100.00	/	Loss_test 2.59222	Acc_test 94.90
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [50/50]	lr: 7.81e-06	time: 00:06:19	Loss_train 0.00000	Acc_train 100.00	/	Loss_test 2.56637	Acc_test 94.90
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
RESULT:  {'train_loss': 0.0, 'train_acc': 100.0, 'test_loss': 2.566368341445923, 'test_acc': 94.89795684814453, 'convergence': 23.604230880737305, 'R1': 3, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [5, 9]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [5, 9]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}
IN R2:  {'R1': {'train_loss': 0.00037885058554820716, 'train_acc': 99.9947726726532, 'test_loss': 1.5291059017181396, 'test_acc': 94.02035522460938, 'convergence': 23.743215560913086, 'R1': 1, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [0, 8]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [0, 8]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}, 'R2': {'train_loss': 0.0, 'train_acc': 100.0, 'test_loss': 2.566368341445923, 'test_acc': 94.89795684814453, 'convergence': 23.604230880737305, 'R1': 3, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [5, 9]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [5, 9]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 2, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 Model IMG_2C_CL loaded successfuly with best perf



 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=2, bias=True)
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
786
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 786
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1914
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1914
    Root location: /leonardo_work/try24_antoniet/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=True)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1914
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Accuracy of the network on the 1st dataset: 71.629 %
Test loss on the 1st dataset: 18.618

