BLOCKS:  {'b0': {'arch': 'CNN', 'preset': 'softkrotov-c48-k5-p2-s1-d1-b0-t1.1-lr0.08', 'operation': 'batchnorm2d', 'num': 0, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5}}, 'b1': {'arch': 'CNN', 'preset': 'softkrotov-c192-k3-p1-s1-d1-b0-t0.7-lr0.01', 'operation': 'batchnorm2d', 'num': 1, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3}}, 'b2': {'arch': 'CNN', 'preset': 'softkrotov-c768-k3-p1-s1-d1-b0-t0.5-lr0.01', 'operation': 'batchnorm2d', 'num': 2, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3}}, 'b3': {'arch': 'CNN', 'preset': 'softkrotov-c3072-k3-p1-s1-d1-b0-t0.4-lr0.01', 'operation': 'batchnorm2d', 'num': 3, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 1.4}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3}}, 'b4': {'arch': 'CNN', 'preset': 'softkrotov-c12288-k3-p1-s1-d1-b0-t0.25-lr0.01', 'operation': 'batchnorm2d', 'num': 4, 'batch_norm': False, 'pool': {'type': 'avg', 'kernel_size': 2, 'stride': 2, 'padding': 0}, 'activation': {'function': 'triangle', 'param': 1.0}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3}}, 'b5': {'arch': 'MLP', 'preset': 'BP-c1000', 'operation': 'flatten', 'num': 5, 'att_dropout': None, 'dropout': 0.5, 'layer': {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.25, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 1000}, 'pool': None, 'activation': None}}
CL:  True
{'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 10, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True}
CL:  True
{'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 10, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 2, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=2, bias=True)

 ********** Hebbian Unsupervised learning of blocks [0] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
785
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 785
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1809
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 2.33e-01	time: 00:00:24	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:9.955e-03/SW:6.351e-01/MR:5.258e+00/SR:1.630e+00/MeD:1.226e+00/MaD:4.253e+00/MW:0.681/MAW:0.319
|       0 |       1 |       2 |       3 |       4 |       5 |       6 |       7 |       8 |       9 |      10 |      11 |     12 |      13 |     14 |      15 |        16 |     17 |      18 |      19 |     20 |      21 |      22 |      23 |      24 |        25 |      26 |      27 |      28 |      29 |
|---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+--------+---------+--------+---------+-----------+--------+---------+---------+--------+---------+---------+---------+---------+-----------+---------+---------+---------+---------|
|   0.167 |   0.305 |   0.245 |   0.282 |   0.214 |   0.241 |   0.226 |   0.271 |   0.185 |   0.342 |   0.152 |   0.207 |   0.25 |   0.234 |   0.22 |   0.276 |   0.00153 |   0.18 |   0.265 |   0.227 |   0.28 |   0.224 |   0.245 |   0.323 |   0.281 |   0.00155 |   0.233 |   0.141 |   0.204 |   0.312 |
|   3.67  |   6.95  |   5.44  |   6.36  |   4.71  |   5.35  |   5     |   6.09  |   4.05  |   7.95  |   3.36  |   4.56  |   5.57 |   5.19  |   4.86 |   6.21  |   1.01    |   3.96 |   5.93  |   5.01  |   6.31 |   4.94  |   5.46  |   7.44  |   6.34  |   1.01    |   5.15  |   3.13  |   4.48  |   7.14  |
|   0.92  |   0.59  |   0.4   |   0.79  |   2.67  |   5.45  |   1.5   |   1.01  |   2.64  |   0.46  |   2.26  |   1.25  |   0.87 |   0.58  |   3.98 |   0.58  |   8.37    |   0.77 |   1.3   |   2.11  |   1.11 |   2.78  |   0.76  |   0.7   |   0.84  |  10.36    |   1     |   1.33  |   0.64  |   0.5   |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan    | nan     | nan       | nan    | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan       | nan     | nan     | nan     | nan     |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan    | nan     | nan       | nan    | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan       | nan     | nan     | nan     | nan     |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan    | nan     | nan       | nan    | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan       | nan     | nan     | nan     | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [1] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
785
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 785
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1809
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 2.33e-01	time: 00:00:46	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:-1.639e-03/SW:7.274e-01/MR:1.481e+01/SR:3.034e+00/MeD:2.485e+00/MaD:8.372e+00/MW:0.654/MAW:0.346
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |       17 |       18 |       19 |       20 |       21 |       22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------|
|   0.0652 |   0.0913 |   0.0882 |   0.0667 |   0.0844 |   0.0549 |   0.0543 |   0.0747 |   0.0622 |   0.0889 |   0.0678 |   0.0928 |   0.0757 |   0.0813 |   0.0752 |   0.0646 |   0.0548 |   0.0356 |   0.0926 |   0.0553 |   0.0567 |   0.0729 |   0.0638 |   0.0573 |   0.0696 |   0.0758 |   0.0723 |   0.0709 |   0.0853 |   0.0643 |
|  13.18   |  20.08   |  19.23   |  13.57   |  18.19   |  10.69   |  10.54   |  15.59   |  12.43   |  19.42   |  13.83   |  20.51   |  15.87   |  17.34   |  15.73   |  13.02   |  10.67   |   6.44   |  20.44   |  10.79   |  11.11   |  15.15   |  12.84   |  11.25   |  14.29   |  15.88   |  14.97   |  14.63   |  18.44   |  12.97   |
|   0.7    |   0.26   |   0.17   |   1.59   |   0.12   |   0.98   |   0.6    |   0.5    |   0.5    |   0.09   |   0.68   |   0.15   |   0.2    |   0.19   |   0.79   |   0.64   |   1.96   |   3.53   |   0.15   |   0.9    |   1.11   |   0.46   |   0.36   |   0.72   |   0.4    |   0.21   |   0.93   |   0.34   |   0.14   |   0.37   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [2] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
785
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 785
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1809
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.08e-01	time: 00:01:07	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:-3.192e-04/SW:4.715e-01/MR:1.932e+01/SR:3.283e+00/MeD:2.707e+00/MaD:9.838e+00/MW:0.616/MAW:0.384
|       0 |        1 |        2 |        3 |        4 |        5 |       6 |        7 |        8 |       9 |       10 |       11 |       12 |       13 |      14 |       15 |      16 |       17 |       18 |       19 |       20 |       21 |       22 |       23 |      24 |       25 |      26 |       27 |      28 |       29 |
|---------+----------+----------+----------+----------+----------+---------+----------+----------+---------+----------+----------+----------+----------+---------+----------+---------+----------+----------+----------+----------+----------+----------+----------+---------+----------+---------+----------+---------+----------|
|   0.105 |   0.0839 |   0.0958 |   0.0908 |   0.0928 |   0.0962 |   0.095 |   0.0868 |   0.0836 |   0.107 |   0.0937 |   0.0875 |   0.0886 |   0.0957 |   0.084 |   0.0957 |   0.103 |   0.0742 |   0.0713 |   0.0768 |   0.0917 |   0.0749 |   0.0778 |   0.0803 |   0.101 |   0.0974 |   0.099 |   0.0906 |   0.102 |   0.0948 |
|  24.11  |  18.06   |  21.34   |  19.93   |  20.51   |  21.47   |  21.11  |  18.85   |  17.96   |  24.51  |  20.76   |  19.02   |  19.33   |  21.31   |  18.06  |  21.32   |  23.29  |  15.49   |  14.74   |  16.16   |  20.18   |  15.66   |  16.43   |  17.08   |  22.88  |  21.81   |  22.27  |  19.89   |  23.16  |  21.08   |
|   0.02  |   0.31   |   0.06   |   0.07   |   0.08   |   0.04   |   0.06  |   0.09   |   0.12   |   0.01  |   0.04   |   0.11   |   0.09   |   0.05   |   0.09  |   0.04   |   0.02  |   0.18   |   0.24   |   0.12   |   0.08   |   0.16   |   0.28   |   0.2    |   0.03  |   0.07   |   0.11  |   0.05   |   0.01  |   0.04   |
| nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan     | nan      |
| nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan     | nan      |
| nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [3] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
785
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 785
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1809
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 9.65e-02	time: 00:01:31	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.109e-04/SW:2.635e-01/MR:2.163e+01/SR:3.500e+00/MeD:2.739e+00/MaD:2.053e+01/MW:0.619/MAW:0.381
|        0 |       1 |       2 |       3 |        4 |        5 |        6 |        7 |       8 |      9 |       10 |       11 |      12 |       13 |       14 |      15 |       16 |       17 |       18 |      19 |      20 |      21 |       22 |       23 |      24 |      25 |       26 |       27 |      28 |       29 |
|----------+---------+---------+---------+----------+----------+----------+----------+---------+--------+----------+----------+---------+----------+----------+---------+----------+----------+----------+---------+---------+---------+----------+----------+---------+---------+----------+----------+---------+----------|
|   0.0702 |   0.108 |   0.103 |   0.108 |   0.0893 |   0.0797 |   0.0986 |   0.0904 |   0.105 |   0.1  |   0.0747 |   0.0981 |   0.104 |   0.0848 |   0.0845 |   0.083 |   0.0928 |   0.0884 |   0.0844 |   0.093 |   0.108 |   0.108 |   0.0954 |   0.0881 |   0.108 |   0.107 |   0.0884 |   0.0495 |   0.104 |   0.0918 |
|  14.45   |  24.94  |  23.51  |  24.92  |  19.54   |  16.92   |  22.13   |  19.83   |  24.04  |  22.64 |  15.61   |  21.99   |  23.61  |  18.29   |  18.22   |  17.81  |  20.5    |  19.27   |  18.18   |  20.57  |  24.83  |  24.85  |  21.22   |  19.2    |  25     |  24.49  |  19.27   |   9.43   |  23.77  |  20.22   |
|   0.1    |   0     |   0.01  |   0     |   0.04   |   0.13   |   0.03   |   0.04   |   0.01  |   0.01 |   0.07   |   0.01   |   0.01  |   0.05   |   0.05   |   0.06  |   0.04   |   0.03   |   0.03   |   0.03  |   0     |   0     |   0.03   |   0.04   |   0     |   0.01  |   0.04   |   0.31   |   0.01  |   0.03   |
| nan      | nan     | nan     | nan     | nan      | nan      | nan      | nan      | nan     | nan    | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan     | nan     | nan     | nan      | nan      | nan     | nan     | nan      | nan      | nan     | nan      |
| nan      | nan     | nan     | nan     | nan      | nan      | nan      | nan      | nan     | nan    | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan     | nan     | nan     | nan      | nan      | nan     | nan     | nan      | nan      | nan     | nan      |
| nan      | nan     | nan     | nan     | nan      | nan      | nan      | nan      | nan     | nan    | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan     | nan     | nan     | nan      | nan      | nan     | nan     | nan      | nan      | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [4] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
785
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 785
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1809
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 8.83e-02	time: 00:02:09	Acc_train 0.00	Acc_test 0.00	convergence: 2.38e+01	R1: 1	Info MB:0.000e+00/SB:0.000e+00/MW:-3.282e-06/SW:1.496e-01/MR:2.478e+01/SR:2.196e+00/MeD:9.995e-01/MaD:2.377e+01/MW:0.703/MAW:0.297
|       0 |       1 |       2 |       3 |       4 |       5 |       6 |       7 |      8 |      9 |      10 |      11 |      12 |      13 |      14 |       15 |      16 |     17 |      18 |      19 |      20 |      21 |      22 |      23 |      24 |      25 |      26 |      27 |      28 |      29 |
|---------+---------+---------+---------+---------+---------+---------+---------+--------+--------+---------+---------+---------+---------+---------+----------+---------+--------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------|
|   0.105 |   0.109 |   0.108 |   0.109 |   0.109 |   0.107 |   0.109 |   0.114 |   0.11 |   0.11 |   0.109 |   0.108 |   0.104 |   0.112 |   0.107 |   0.0261 |   0.108 |   0.11 |   0.109 |   0.111 |   0.109 |   0.108 |   0.112 |   0.112 |   0.109 |   0.106 |   0.109 |   0.111 |   0.108 |   0.111 |
|  23.85  |  25.28  |  24.79  |  25.22  |  25.25  |  24.52  |  25.12  |  26.74  |  25.48 |  25.43 |  25.03  |  24.85  |  23.67  |  25.97  |  24.48  |   4.6    |  24.78  |  25.38 |  25.03  |  25.66  |  25.23  |  24.73  |  26.02  |  26.13  |  25.08  |  24.25  |  25.23  |  25.9   |  24.86  |  25.86  |
|   0.01  |   0     |   0     |   0     |   0     |   0     |   0     |   0.01  |   0    |   0    |   0     |   0     |   0     |   0     |   0.01  |   0.13   |   0     |   0    |   0     |   0     |   0     |   0     |   0     |   0     |   0     |   0.01  |   0     |   0     |   0     |   0     |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan    | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan    | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan    | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Supervised learning of blocks [5] **********
SAVING FOLDER FOR SUP:  IMG_2C_CL
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
785
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 785
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1809
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Epoch: [1/50]	lr: 1.00e-03	time: 00:02:27	Loss_train 5.36686	Acc_train 81.26	/	Loss_test 2.17320	Acc_test 86.88
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [10/50]	lr: 1.00e-03	time: 00:04:01	Loss_train 0.90202	Acc_train 94.52	/	Loss_test 4.12825	Acc_test 87.90
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [20/50]	lr: 2.50e-04	time: 00:05:46	Loss_train 0.02797	Acc_train 99.66	/	Loss_test 2.15756	Acc_test 90.83
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [30/50]	lr: 1.25e-04	time: 00:07:30	Loss_train 0.01179	Acc_train 99.84	/	Loss_test 1.95927	Acc_test 91.59
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [40/50]	lr: 3.13e-05	time: 00:09:14	Loss_train 0.00045	Acc_train 99.98	/	Loss_test 1.98835	Acc_test 91.21
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [50/50]	lr: 7.81e-06	time: 00:10:59	Loss_train 0.00005	Acc_train 99.99	/	Loss_test 1.98154	Acc_test 91.46
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
RESULT:  {'train_loss': 4.9350946937920526e-05, 'train_acc': 99.99447464942932, 'test_loss': 1.981544017791748, 'test_acc': 91.4649658203125, 'convergence': 23.783475875854492, 'R1': 1, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [3, 8]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [3, 8]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}
IN R1:  {'R1': {'train_loss': 4.9350946937920526e-05, 'train_acc': 99.99447464942932, 'test_loss': 1.981544017791748, 'test_acc': 91.4649658203125, 'convergence': 23.783475875854492, 'R1': 1, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [3, 8]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [3, 8]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 2, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 Model IMG_2C_CL loaded successfuly with best perf



 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=2, bias=True)

 ********** Hebbian Unsupervised learning of blocks [0] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
751
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 751
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1949
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.58e-01	time: 00:00:23	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.293e-02/SW:4.706e-01/MR:3.666e+00/SR:1.801e+00/MeD:1.368e+00/MaD:4.126e+00/MW:0.756/MAW:0.244
|        0 |       1 |       2 |       3 |       4 |       5 |       6 |       7 |        8 |       9 |        10 |      11 |      12 |      13 |      14 |      15 |         16 |      17 |      18 |      19 |      20 |      21 |      22 |      23 |      24 |        25 |      26 |      27 |       28 |      29 |
|----------+---------+---------+---------+---------+---------+---------+---------+----------+---------+-----------+---------+---------+---------+---------+---------+------------+---------+---------+---------+---------+---------+---------+---------+---------+-----------+---------+---------+----------+---------|
|   0.0644 |   0.144 |   0.142 |   0.121 |   0.149 |   0.115 |   0.154 |   0.219 |   0.0113 |   0.213 |   0.00208 |   0.138 |   0.133 |   0.146 |   0.156 |   0.223 |   3.96e-05 |   0.071 |   0.151 |   0.143 |   0.236 |   0.196 |   0.155 |   0.251 |   0.153 |   4.5e-05 |   0.317 |   0.119 |   0.0177 |   0.326 |
|   1.75   |   3.18  |   3.15  |   2.74  |   3.3   |   2.62  |   3.39  |   4.83  |   1.07   |   4.68  |   1.01    |   3.08  |   2.97  |   3.22  |   3.43  |   4.92  |   1        |   1.85  |   3.32  |   3.16  |   5.24  |   4.31  |   3.42  |   5.6   |   3.38  |   1       |   7.28  |   2.71  |   1.13   |   7.5   |
|   0.66   |   0.69  |   0.66  |   0.67  |   0.76  |   0.61  |   0.87  |   0.68  |   1.04   |   0.6   |   2.86    |   0.61  |   0.8   |   0.63  |   0.59  |   0.68  |  26.06     |   0.77  |   0.61  |   0.89  |   0.83  |   0.74  |   0.74  |   0.68  |   0.63  |  36.12    |   0.96  |   1.08  |   0.83   |   0.78  |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan       | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan       | nan     | nan     | nan      | nan     |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan       | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan       | nan     | nan     | nan      | nan     |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan       | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan       | nan     | nan     | nan      | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [1] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
751
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 751
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1949
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.58e-01	time: 00:00:47	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:3.631e-03/SW:4.202e-01/MR:8.503e+00/SR:2.004e+00/MeD:1.619e+00/MaD:5.808e+00/MW:0.548/MAW:0.452
|        0 |      1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |     12 |       13 |       14 |       15 |       16 |       17 |       18 |       19 |       20 |       21 |       22 |      23 |       24 |       25 |       26 |       27 |       28 |       29 |
|----------+--------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+--------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------|
|   0.0509 |   0.04 |   0.0618 |   0.0516 |   0.0413 |   0.0497 |   0.0362 |   0.0518 |   0.0426 |   0.0459 |   0.0557 |   0.0436 |   0.04 |   0.0519 |   0.0534 |   0.0456 |   0.0528 |   0.0163 |   0.0573 |   0.0386 |   0.0411 |   0.0433 |   0.0313 |   0.038 |   0.0515 |   0.0399 |   0.0597 |   0.0422 |   0.0421 |   0.0338 |
|   9.76   |   7.34 |  12.33   |   9.91   |   7.62   |   9.47   |   6.55   |   9.96   |   7.9    |   8.62   |  10.88   |   8.13   |   7.35 |  10      |  10.33   |   8.56   |  10.2    |   2.93   |  11.26   |   7.06   |   7.57   |   8.07   |   5.58   |   6.93  |   9.89   |   7.34   |  11.82   |   7.82   |   7.79   |   6.07   |
|   0.33   |   0.52 |   0.18   |   1.02   |   0.35   |   0.47   |   0.33   |   0.24   |   0.23   |   0.36   |   1.96   |   0.53   |   0.45 |   0.55   |   0.35   |   0.23   |   0.12   |   2.71   |   0.35   |   0.3    |   0.38   |   0.28   |   0.39   |   0.33  |   0.18   |   0.43   |   1.42   |   0.34   |   0.57   |   0.39   |
| nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [2] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
751
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 751
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1949
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.08e-01	time: 00:01:10	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.166e-03/SW:3.159e-01/MR:1.289e+01/SR:2.496e+00/MeD:1.936e+00/MaD:1.184e+01/MW:0.585/MAW:0.415
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |      17 |       18 |       19 |       20 |       21 |       22 |       23 |      24 |       25 |      26 |       27 |      28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+---------+----------+---------+----------+---------+----------|
|   0.0801 |   0.0641 |   0.0675 |   0.0666 |   0.0642 |   0.0647 |   0.0734 |   0.0612 |   0.0627 |   0.0785 |   0.0634 |   0.0797 |   0.0469 |   0.0765 |   0.0688 |   0.0669 |   0.0726 |   0.045 |   0.0609 |   0.0572 |   0.0833 |   0.0629 |   0.0629 |   0.0701 |   0.074 |   0.0625 |   0.063 |   0.0566 |   0.068 |   0.0597 |
|  17.02   |  12.91   |  13.77   |  13.52   |  12.94   |  13.05   |  15.27   |  12.2    |  12.55   |  16.6    |  12.73   |  16.93   |   8.86   |  16.08   |  14.09   |  13.6    |  15.05   |   8.43  |  12.11   |  11.22   |  17.89   |  12.61   |  12.61   |  14.41   |  15.41  |  12.51   |  12.62  |  11.08   |  13.89  |  11.82   |
|   0.07   |   0.08   |   0.08   |   0.07   |   0.1    |   0.1    |   0.07   |   0.07   |   0.09   |   0.06   |   0.08   |   0.03   |   0.14   |   0.06   |   0.04   |   0.1    |   0.08   |   0.2   |   0.08   |   0.07   |   0.03   |   0.05   |   0.13   |   0.04   |   0.17  |   0.17   |   0.17  |   0.12   |   0.11  |   0.1    |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan     | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan     | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [3] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
751
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 751
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1949
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 8.17e-02	time: 00:01:36	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:3.777e-04/SW:2.155e-01/MR:1.756e+01/SR:3.537e+00/MeD:2.756e+00/MaD:1.655e+01/MW:0.610/MAW:0.390
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |      14 |       15 |       16 |       17 |       18 |       19 |       20 |      21 |       22 |      23 |      24 |      25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+---------+----------+---------+---------+---------+----------+----------+----------+----------|
|   0.0667 |   0.0961 |   0.0766 |   0.0909 |   0.0817 |   0.0798 |   0.0748 |   0.0725 |   0.0847 |   0.0773 |   0.0758 |   0.0756 |   0.0812 |   0.0677 |   0.065 |   0.0652 |   0.0834 |   0.0714 |   0.0686 |   0.0766 |   0.0813 |   0.109 |   0.0757 |   0.068 |   0.089 |   0.084 |   0.0883 |   0.0495 |   0.0779 |   0.0634 |
|  13.56   |  21.43   |  16.09   |  19.96   |  17.45   |  16.95   |  15.62   |  15.03   |  18.27   |  16.28   |  15.88   |  15.84   |  17.32   |  13.82   |  13.14  |  13.17   |  17.9    |  14.74   |  14.04   |  16.11   |  17.35   |  25.12  |  15.88   |  13.89  |  19.44  |  18.07  |  19.24   |   9.43   |  16.45   |  12.74   |
|   0.03   |   0.02   |   0.03   |   0.02   |   0.01   |   0      |   0.09   |   0.04   |   0.02   |   0.04   |   0      |   0.03   |   0.02   |   0.04   |   0.07  |   0.04   |   0.01   |   0.03   |   0.04   |   0.02   |   0.07   |   0     |   0.04   |   0.06  |   0.03  |   0.05  |   0      |   0      |   0.03   |   0.09   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan     | nan     | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan     | nan     | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan     | nan     | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Hebbian Unsupervised learning of blocks [4] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
751
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 751
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1949
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_2C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 6.37e-02	time: 00:02:17	Acc_train 0.00	Acc_test 0.00	convergence: 2.35e+01	R1: 4	Info MB:0.000e+00/SB:0.000e+00/MW:7.440e-06/SW:1.489e-01/MR:2.455e+01/SR:3.167e+00/MeD:1.784e+00/MaD:2.354e+01/MW:0.663/MAW:0.337
|       0 |       1 |       2 |       3 |      4 |       5 |       6 |       7 |       8 |       9 |      10 |      11 |       12 |      13 |      14 |       15 |      16 |     17 |      18 |      19 |      20 |       21 |      22 |      23 |      24 |      25 |      26 |      27 |      28 |       29 |
|---------+---------+---------+---------+--------+---------+---------+---------+---------+---------+---------+---------+----------+---------+---------+----------+---------+--------+---------+---------+---------+----------+---------+---------+---------+---------+---------+---------+---------+----------|
|   0.109 |   0.111 |   0.106 |   0.111 |   0.11 |   0.111 |   0.108 |   0.118 |   0.111 |   0.114 |   0.109 |   0.108 |   0.0965 |   0.115 |   0.108 |   0.0262 |   0.112 |   0.11 |   0.113 |   0.105 |   0.107 |   0.0981 |   0.113 |   0.116 |   0.111 |   0.109 |   0.109 |   0.116 |   0.106 |   0.0984 |
|  25.05  |  25.81  |  24.38  |  25.9   |  25.55 |  25.65  |  24.87  |  27.99  |  25.86  |  26.55  |  25.21  |  24.98  |  21.54   |  26.86  |  24.78  |   4.61   |  26.05  |  25.55 |  26.24  |  24.11  |  24.43  |  22.01   |  26.42  |  27.15  |  25.82  |  25.29  |  25.18  |  27.4   |  24.37  |  22.08   |
|   0.01  |   0     |   0     |   0     |   0    |   0     |   0.01  |   0.01  |   0     |   0     |   0     |   0     |   0.01   |   0     |   0     |   0      |   0     |   0    |   0     |   0     |   0.01  |   0.01   |   0     |   0     |   0     |   0     |   0     |   0     |   0     |   0.01   |
| nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan      | nan     | nan    | nan     | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      |
| nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan      | nan     | nan    | nan     | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      |
| nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan      | nan     | nan    | nan     | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models

 ********** Supervised learning of blocks [5] **********
SAVING FOLDER FOR SUP:  IMG_2C_CL
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
751
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 751
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1949
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1949
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1949
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Epoch: [1/50]	lr: 1.00e-03	time: 00:02:36	Loss_train 8.29473	Acc_train 82.04	/	Loss_test 2.77355	Acc_test 90.68
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [10/50]	lr: 1.00e-03	time: 00:04:18	Loss_train 0.91902	Acc_train 95.68	/	Loss_test 5.04663	Acc_test 86.15
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [20/50]	lr: 2.50e-04	time: 00:06:11	Loss_train 0.03388	Acc_train 99.62	/	Loss_test 2.88509	Acc_test 90.81
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [30/50]	lr: 1.25e-04	time: 00:08:05	Loss_train 0.00628	Acc_train 99.92	/	Loss_test 2.31391	Acc_test 92.28
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [40/50]	lr: 3.13e-05	time: 00:09:58	Loss_train 0.00031	Acc_train 99.99	/	Loss_test 2.46314	Acc_test 92.54
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
Epoch: [50/50]	lr: 7.81e-06	time: 00:11:51	Loss_train 0.00012	Acc_train 99.99	/	Loss_test 2.50897	Acc_test 92.54
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_2C_CL/models
RESULT:  {'train_loss': 0.0001208317480632104, 'train_acc': 99.98973608016968, 'test_loss': 2.508967161178589, 'test_acc': 92.54327392578125, 'convergence': 23.549766540527344, 'R1': 4, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [2, 5]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [2, 5]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}
IN R2:  {'R1': {'train_loss': 4.9350946937920526e-05, 'train_acc': 99.99447464942932, 'test_loss': 1.981544017791748, 'test_acc': 91.4649658203125, 'convergence': 23.783475875854492, 'R1': 1, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [3, 8]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [3, 8]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}, 'R2': {'train_loss': 0.0001208317480632104, 'train_acc': 99.98973608016968, 'test_loss': 2.508967161178589, 'test_acc': 92.54327392578125, 'convergence': 23.549766540527344, 'R1': 4, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [2, 5]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 2, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 2, 'selected_classes': [2, 5]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 2, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 Model IMG_2C_CL loaded successfuly with best perf



 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=2, bias=True)
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
785
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 785
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1809
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1809
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  1809
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Accuracy of the network on the 1st dataset: 45.478 %
Test loss on the 1st dataset: 30.188

