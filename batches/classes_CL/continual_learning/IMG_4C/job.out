BLOCKS:  {'b0': {'arch': 'CNN', 'preset': 'softkrotov-c48-k5-p2-s1-d1-b0-t1.1-lr0.08', 'operation': 'batchnorm2d', 'num': 0, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5}}, 'b1': {'arch': 'CNN', 'preset': 'softkrotov-c192-k3-p1-s1-d1-b0-t0.7-lr0.01', 'operation': 'batchnorm2d', 'num': 1, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3}}, 'b2': {'arch': 'CNN', 'preset': 'softkrotov-c768-k3-p1-s1-d1-b0-t0.5-lr0.01', 'operation': 'batchnorm2d', 'num': 2, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3}}, 'b3': {'arch': 'CNN', 'preset': 'softkrotov-c3072-k3-p1-s1-d1-b0-t0.4-lr0.01', 'operation': 'batchnorm2d', 'num': 3, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 1.4}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3}}, 'b4': {'arch': 'CNN', 'preset': 'softkrotov-c12288-k3-p1-s1-d1-b0-t0.25-lr0.01', 'operation': 'batchnorm2d', 'num': 4, 'batch_norm': False, 'pool': {'type': 'avg', 'kernel_size': 2, 'stride': 2, 'padding': 0}, 'activation': {'function': 'triangle', 'param': 1.0}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3}}, 'b5': {'arch': 'MLP', 'preset': 'BP-c1000', 'operation': 'flatten', 'num': 5, 'att_dropout': None, 'dropout': 0.5, 'layer': {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.25, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 1000}, 'pool': None, 'activation': None}}
CL:  True
{'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 10, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True}
CL:  True
{'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 10, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 4, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=4, bias=True)

 ********** Hebbian Unsupervised learning of blocks [0] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1538
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1538
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3862
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.62e-01	time: 00:00:51	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:8.913e-03/SW:4.825e-01/MR:3.764e+00/SR:1.835e+00/MeD:1.451e+00/MaD:4.017e+00/MW:0.727/MAW:0.273
|        0 |       1 |       2 |       3 |       4 |       5 |       6 |       7 |        8 |       9 |        10 |      11 |      12 |      13 |     14 |      15 |         16 |      17 |      18 |      19 |      20 |      21 |      22 |      23 |      24 |         25 |     26 |       27 |       28 |      29 |
|----------+---------+---------+---------+---------+---------+---------+---------+----------+---------+-----------+---------+---------+---------+--------+---------+------------+---------+---------+---------+---------+---------+---------+---------+---------+------------+--------+----------+----------+---------|
|   0.0887 |   0.136 |   0.174 |   0.176 |   0.163 |   0.175 |   0.112 |   0.291 |   0.0402 |   0.213 |   0.00254 |   0.157 |   0.157 |   0.163 |   0.17 |   0.287 |   3.67e-05 |   0.104 |   0.221 |   0.122 |   0.214 |   0.118 |   0.155 |   0.282 |   0.226 |   4.31e-05 |   0.31 |   0.0671 |   0.0508 |   0.255 |
|   2.15   |   3.03  |   3.82  |   3.86  |   3.59  |   3.84  |   2.57  |   6.59  |   1.4    |   4.69  |   1.01    |   3.46  |   3.45  |   3.58  |   3.74 |   6.48  |   1        |   2.43  |   4.87  |   2.76  |   4.71  |   2.68  |   3.42  |   6.37  |   4.98  |   1        |   7.1  |   1.79   |   1.55   |   5.7   |
|   0.77   |   0.63  |   0.48  |   0.73  |   1.7   |   3.17  |   1.13  |   0.92  |   1.71   |   0.5   |   2.67    |   0.93  |   0.86  |   0.59  |   2.53 |   0.64  |  16.27     |   0.73  |   1.01  |   1.85  |   0.97  |   1.78  |   0.72  |   0.69  |   0.77  |  22.28     |   0.98 |   1.22   |   0.67   |   0.61  |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan       | nan     | nan     | nan     | nan    | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan    | nan      | nan      | nan     |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan       | nan     | nan     | nan     | nan    | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan    | nan      | nan      | nan     |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan       | nan     | nan     | nan     | nan    | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan    | nan      | nan      | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [1] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1538
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1538
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3862
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.62e-01	time: 00:01:38	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:6.338e-03/SW:3.535e-01/MR:7.132e+00/SR:1.772e+00/MeD:1.449e+00/MaD:5.935e+00/MW:0.536/MAW:0.464
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |        17 |       18 |       19 |      20 |       21 |       22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+-----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------|
|   0.0426 |   0.0366 |   0.0584 |   0.0452 |   0.0349 |   0.0311 |   0.0344 |   0.0445 |   0.0277 |   0.0432 |   0.0447 |   0.0393 |   0.0352 |   0.0483 |   0.0448 |   0.0398 |   0.0448 |   0.00295 |   0.0496 |   0.0367 |   0.038 |   0.0337 |   0.0241 |   0.0356 |   0.0366 |   0.0375 |   0.0448 |   0.0357 |   0.0387 |   0.0232 |
|   7.9    |   6.63   |  11.5    |   8.46   |   6.3    |   5.53   |   6.19   |   8.33   |   4.9    |   8.04   |   8.37   |   7.2    |   6.36   |   9.15   |   8.39   |   7.3    |   8.38   |   1.2     |   9.46   |   6.67   |   6.93  |   6.06   |   4.24   |   6.44   |   6.64   |   6.82   |   8.39   |   6.45   |   7.08   |   4.07   |
|   0.48   |   0.6    |   0.19   |   1.1    |   0.24   |   0.67   |   0.37   |   0.36   |   0.45   |   0.21   |   1.25   |   0.37   |   0.33   |   0.63   |   0.68   |   0.34   |   0.41   |   3.61    |   0.28   |   0.41   |   0.36  |   0.27   |   0.38   |   0.37   |   0.23   |   0.38   |   1.23   |   0.32   |   0.35   |   0.4    |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [2] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1538
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1538
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3862
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.08e-01	time: 00:02:21	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.410e-03/SW:3.018e-01/MR:1.230e+01/SR:2.491e+00/MeD:1.935e+00/MaD:1.119e+01/MW:0.567/MAW:0.433
|        0 |       1 |        2 |       3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |       17 |       18 |       19 |       20 |       21 |       22 |      23 |       24 |       25 |       26 |       27 |      28 |       29 |
|----------+---------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+---------+----------|
|   0.0799 |   0.064 |   0.0717 |   0.066 |   0.0693 |   0.0606 |   0.0702 |   0.0647 |   0.0614 |   0.0805 |   0.0599 |   0.0766 |   0.0442 |   0.0674 |   0.0645 |   0.0575 |   0.0658 |   0.0456 |   0.0562 |   0.0571 |   0.0758 |   0.0622 |   0.0684 |   0.062 |   0.0636 |   0.0598 |   0.0565 |   0.0514 |   0.054 |   0.0597 |
|  16.98   |  12.89  |  14.81   |  13.37  |  14.22   |  12.06   |  14.44   |  13.06   |  12.25   |  17.15   |  11.87   |  16.09   |   8.26   |  13.72   |  13.01   |  11.3    |  13.32   |   8.56   |  11      |  11.2    |  15.88   |  12.43   |  13.97   |  12.39  |  12.79   |  11.85   |  11.05   |   9.87   |  10.48  |  11.83   |
|   0.05   |   0.1   |   0.08   |   0.07  |   0.09   |   0.07   |   0.07   |   0.07   |   0.11   |   0.05   |   0.06   |   0.06   |   0.14   |   0.07   |   0.06   |   0.15   |   0.06   |   0.14   |   0.14   |   0.08   |   0.05   |   0.1    |   0.15   |   0.16  |   0.14   |   0.14   |   0.23   |   0.09   |   0.06  |   0.1    |
| nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      |
| nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      |
| nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [3] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1538
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1538
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3862
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 7.81e-02	time: 00:03:09	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:5.125e-04/SW:2.054e-01/MR:1.664e+01/SR:3.828e+00/MeD:3.001e+00/MaD:1.563e+01/MW:0.600/MAW:0.400
|       0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |       9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |       17 |       18 |      19 |       20 |      21 |       22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|---------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------|
|   0.072 |   0.0901 |   0.0734 |   0.0903 |   0.0834 |   0.0975 |   0.0448 |   0.0639 |   0.0949 |   0.078 |   0.0621 |   0.0522 |   0.0779 |   0.0737 |   0.0552 |   0.0588 |   0.0703 |   0.0778 |   0.0429 |   0.079 |   0.0914 |   0.101 |   0.0755 |   0.0717 |   0.0764 |   0.0691 |   0.0939 |   0.0809 |   0.0698 |   0.0682 |
|  14.92  |  19.75   |  15.26   |  19.81   |  17.92   |  21.82   |   8.39   |  12.86   |  21.1    |  16.48  |  12.41   |  10.06   |  16.45   |  15.34   |  10.75   |  11.62   |  14.46   |  16.43   |   7.96   |  16.74  |  20.11   |  22.96  |  15.81   |  14.82   |  16.05   |  14.16   |  20.82   |  17.23   |  14.35   |  13.94   |
|   0.06  |   0.01   |   0.03   |   0.02   |   0.02   |   0.01   |   0.09   |   0.04   |   0.01   |   0.03  |   0.03   |   0.05   |   0.03   |   0.03   |   0.07   |   0.04   |   0.03   |   0.02   |   0.05   |   0.02  |   0.03   |   0     |   0.03   |   0.03   |   0.02   |   0.04   |   0.02   |   0.05   |   0.03   |   0.04   |
| nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [4] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1538
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1538
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3862
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 6.13e-02	time: 00:04:28	Acc_train 0.00	Acc_test 0.00	convergence: 2.38e+01	R1: 7	Info MB:0.000e+00/SB:0.000e+00/MW:4.134e-06/SW:1.505e-01/MR:2.480e+01/SR:3.364e+00/MeD:1.863e+00/MaD:2.379e+01/MW:0.690/MAW:0.310
|       0 |       1 |      2 |       3 |       4 |       5 |       6 |       7 |       8 |      9 |     10 |      11 |      12 |      13 |      14 |      15 |      16 |      17 |     18 |      19 |      20 |      21 |      22 |      23 |      24 |      25 |      26 |      27 |      28 |       29 |
|---------+---------+--------+---------+---------+---------+---------+---------+---------+--------+--------+---------+---------+---------+---------+---------+---------+---------+--------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+----------|
|   0.105 |   0.109 |   0.11 |   0.112 |   0.112 |   0.109 |   0.102 |   0.112 |   0.111 |   0.11 |   0.11 |   0.109 |   0.115 |   0.115 |   0.104 |   0.116 |   0.107 |   0.111 |   0.11 |   0.106 |   0.104 |   0.114 |   0.109 |   0.102 |   0.116 |   0.117 |   0.111 |   0.105 |   0.117 |   0.0995 |
|  23.9   |  25.17  |  25.32 |  26.14  |  26.13  |  25.28  |  23.15  |  26.16  |  25.78  |  25.32 |  25.38 |  25.3   |  26.82  |  27.05  |  23.75  |  27.37  |  24.57  |  25.91  |  25.35 |  24.27  |  23.56  |  26.67  |  25.09  |  23.19  |  27.25  |  27.46  |  25.69  |  24.08  |  27.65  |  22.41   |
|   0     |   0     |   0    |   0     |   0     |   0     |   0     |   0     |   0     |   0    |   0    |   0     |   0     |   0     |   0     |   0     |   0     |   0     |   0    |   0.01  |   0.01  |   0     |   0     |   0.01  |   0     |   0     |   0     |   0     |   0     |   0.01   |
| nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      |
| nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      |
| nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Supervised learning of blocks [5] **********
SAVING FOLDER FOR SUP:  IMG_4C_CL
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1538
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1538
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3862
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Epoch: [1/50]	lr: 1.00e-03	time: 00:05:00	Loss_train 7.77101	Acc_train 71.18	/	Loss_test 5.36902	Acc_test 76.59
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [10/50]	lr: 1.00e-03	time: 00:08:18	Loss_train 1.70979	Acc_train 91.75	/	Loss_test 7.80962	Acc_test 81.14
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [20/50]	lr: 2.50e-04	time: 00:11:57	Loss_train 0.07710	Acc_train 99.29	/	Loss_test 4.29105	Acc_test 87.13
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [30/50]	lr: 1.25e-04	time: 00:15:37	Loss_train 0.00773	Acc_train 99.88	/	Loss_test 3.74650	Acc_test 87.84
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [40/50]	lr: 3.13e-05	time: 00:19:17	Loss_train 0.00176	Acc_train 99.98	/	Loss_test 4.22871	Acc_test 88.04
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [50/50]	lr: 7.81e-06	time: 00:22:57	Loss_train 0.00000	Acc_train 100.00	/	Loss_test 3.72763	Acc_test 88.36
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
RESULT:  {'train_loss': 1.5158293535932899e-06, 'train_acc': 99.99741315841675, 'test_loss': 3.727627992630005, 'test_acc': 88.36151123046875, 'convergence': 23.796390533447266, 'R1': 7, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [0, 1, 2, 8]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [0, 1, 2, 8]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}
IN R1:  {'R1': {'train_loss': 1.5158293535932899e-06, 'train_acc': 99.99741315841675, 'test_loss': 3.727627992630005, 'test_acc': 88.36151123046875, 'convergence': 23.796390533447266, 'R1': 7, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [0, 1, 2, 8]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [0, 1, 2, 8]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 4, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 Model IMG_4C_CL loaded successfuly with best perf



 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=4, bias=True)

 ********** Hebbian Unsupervised learning of blocks [0] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1578
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1578
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3716
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.21e-01	time: 00:00:53	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.375e-02/SW:3.574e-01/MR:2.878e+00/SR:1.157e+00/MeD:9.289e-01/MaD:2.193e+00/MW:0.737/MAW:0.263
|        0 |        1 |       2 |       3 |       4 |        5 |       6 |       7 |         8 |       9 |         10 |      11 |      12 |      13 |      14 |      15 |         16 |      17 |      18 |      19 |      20 |      21 |      22 |      23 |      24 |         25 |      26 |         27 |        28 |      29 |
|----------+----------+---------+---------+---------+----------+---------+---------+-----------+---------+------------+---------+---------+---------+---------+---------+------------+---------+---------+---------+---------+---------+---------+---------+---------+------------+---------+------------+-----------+---------|
|   0.0879 |   0.0969 |   0.148 |   0.138 |   0.139 |   0.0773 |   0.106 |   0.174 |   0.00114 |   0.173 |   4.67e-06 |   0.141 |   0.126 |   0.151 |   0.131 |   0.186 |   2.21e-06 |   0.161 |   0.157 |   0.134 |   0.181 |   0.153 |   0.102 |   0.227 |   0.154 |   0.000343 |   0.229 |   0.000373 |   0.00126 |   0.202 |
|   2.13   |   2.29   |   3.26  |   3.07  |   3.09  |   1.96   |   2.46  |   3.83  |   1       |   3.79  |   1        |   3.12  |   2.83  |   3.33  |   2.93  |   4.09  |   1        |   3.55  |   3.47  |   2.99  |   3.97  |   3.37  |   2.38  |   5.01  |   3.39  |   1        |   5.07  |   1        |   1       |   4.44  |
|   0.63   |   0.61   |   0.59  |   0.58  |   0.62  |   0.66   |   0.65  |   0.59  |   1.48    |   0.63  |  34.51     |   0.59  |   0.65  |   0.57  |   0.62  |   0.69  |  26.83     |   0.65  |   0.63  |   0.59  |   0.62  |   0.59  |   0.73  |   0.66  |   0.57  |   4.48     |   0.68  |   2.89     |   1.32    |   0.73  |
| nan      | nan      | nan     | nan     | nan     | nan      | nan     | nan     | nan       | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan        | nan       | nan     |
| nan      | nan      | nan     | nan     | nan     | nan      | nan     | nan     | nan       | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan        | nan       | nan     |
| nan      | nan      | nan     | nan     | nan     | nan      | nan     | nan     | nan       | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan        | nan       | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [1] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1578
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1578
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3716
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.21e-01	time: 00:01:38	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.080e-02/SW:2.390e-01/MR:4.789e+00/SR:1.347e+00/MeD:1.056e+00/MaD:3.787e+00/MW:0.606/MAW:0.394
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |       7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |     16 |        17 |       18 |       19 |       20 |       21 |       22 |       23 |       24 |      25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+--------+-----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------|
|   0.0233 |   0.0278 |   0.0249 |   0.0311 |   0.0258 |   0.0238 |   0.0224 |   0.028 |   0.0285 |   0.0299 |   0.0237 |   0.0265 |   0.0255 |   0.0402 |   0.0314 |   0.0164 |   0.03 |   0.00525 |   0.0298 |   0.0304 |   0.0209 |   0.0311 |   0.0139 |   0.0207 |   0.0246 |   0.028 |   0.0444 |   0.0268 |   0.0319 |   0.0158 |
|   4.1    |   4.91   |   4.38   |   5.55   |   4.54   |   4.18   |   3.93   |   4.94  |   5.05   |   5.32   |   4.17   |   4.66   |   4.48   |   7.4    |   5.6    |   2.94   |   5.33 |   1.42    |   5.29   |   5.4    |   3.67   |   5.54   |   2.55   |   3.64   |   4.33   |   4.94  |   8.31   |   4.73   |   5.7    |   2.85   |
|   0.59   |   0.27   |   0.26   |   0.37   |   0.37   |   0.41   |   0.33   |   0.35  |   0.17   |   0.24   |   0.32   |   0.31   |   0.47   |   0.4    |   0.31   |   0.36   |   0.47 |   1.13    |   0.38   |   0.27   |   0.37   |   0.22   |   0.34   |   0.32   |   0.22   |   0.31  |   0.28   |   0.29   |   0.35   |   0.21   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan    | nan       | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan    | nan       | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan    | nan       | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [2] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1578
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1578
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3716
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.08e-01	time: 00:02:20	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:3.593e-03/SW:2.037e-01/MR:8.212e+00/SR:2.072e+00/MeD:1.613e+00/MaD:7.211e+00/MW:0.560/MAW:0.440
|       0 |        1 |        2 |        3 |        4 |        5 |       6 |       7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |       17 |       18 |       19 |       20 |       21 |       22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|---------+----------+----------+----------+----------+----------+---------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------|
|   0.055 |   0.0379 |   0.0476 |   0.0559 |   0.0553 |   0.0482 |   0.057 |   0.046 |   0.0531 |   0.0519 |   0.0378 |   0.0437 |   0.0371 |   0.0459 |   0.0401 |   0.0514 |   0.0489 |   0.0391 |   0.0501 |   0.0269 |   0.0577 |   0.0447 |   0.0371 |   0.0385 |   0.0541 |   0.0413 |   0.0438 |   0.0198 |   0.0537 |   0.0416 |
|  10.72  |   6.91   |   9.02   |  10.92   |  10.78   |   9.15   |  11.18  |   8.65  |  10.26   |   9.98   |   6.88   |   8.15   |   6.75   |   8.62   |   7.38   |   9.87   |   9.3    |   7.16   |   9.57   |   4.75   |  11.35   |   8.36   |   6.75   |   7.04   |  10.49   |   7.63   |   8.17   |   3.48   |  10.41   |   7.69   |
|   0.09  |   0.17   |   0.12   |   0.09   |   0.09   |   0.09   |   0.07  |   0.08  |   0.08   |   0.09   |   0.09   |   0.12   |   0.08   |   0.08   |   0.11   |   0.09   |   0.05   |   0.12   |   0.09   |   0.13   |   0.1    |   0.09   |   0.12   |   0.14   |   0.13   |   0.11   |   0.22   |   0.12   |   0.05   |   0.09   |
| nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan     | nan      | nan      | nan      | nan      | nan      | nan     | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [3] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1578
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1578
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3716
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 6.25e-02	time: 00:03:07	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:8.181e-04/SW:1.569e-01/MR:1.266e+01/SR:3.126e+00/MeD:2.323e+00/MaD:1.166e+01/MW:0.579/MAW:0.421
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |      12 |       13 |       14 |      15 |       16 |       17 |       18 |       19 |       20 |     21 |       22 |       23 |       24 |       25 |       26 |      27 |       28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+---------+----------+----------+----------+----------+----------+--------+----------+----------+----------+----------+----------+---------+----------+----------|
|   0.0489 |   0.0654 |   0.0714 |   0.0573 |   0.0609 |   0.0803 |   0.0503 |   0.0529 |   0.0603 |   0.0643 |   0.0658 |   0.0367 |   0.055 |   0.0543 |   0.0628 |   0.063 |   0.0576 |   0.0571 |   0.0449 |   0.0645 |   0.0635 |   0.08 |   0.0556 |   0.0733 |   0.0782 |   0.0646 |   0.0675 |   0.062 |   0.0678 |   0.0685 |
|   9.3    |  13.23   |  14.75   |  11.25   |  12.12   |  17.08   |   9.62   |  10.22   |  11.98   |  12.97   |  13.32   |   6.65   |  10.7   |  10.54   |  12.6    |  12.64  |  11.34   |  11.2    |   8.41   |  13.01   |  12.76   |  17    |  10.85   |  15.24   |  16.51   |  13.02   |  13.77   |  12.39  |  13.84   |  14      |
|   0.04   |   0.03   |   0.01   |   0.04   |   0.06   |   0.02   |   0      |   0.05   |   0.03   |   0.03   |   0      |   0.03   |   0.03  |   0.04   |   0.02   |   0.03  |   0.03   |   0.04   |   0      |   0.03   |   0.02   |   0.02 |   0.04   |   0      |   0.01   |   0.03   |   0.04   |   0.02  |   0.01   |   0.02   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan    | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [4] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1578
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1578
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3716
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 4.36e-02	time: 00:04:22	Acc_train 0.00	Acc_test 0.00	convergence: 2.34e+01	R1: 9	Info MB:0.000e+00/SB:0.000e+00/MW:5.657e-05/SW:1.489e-01/MR:2.437e+01/SR:4.378e+00/MeD:2.789e+00/MaD:2.337e+01/MW:0.630/MAW:0.370
|       0 |       1 |       2 |       3 |       4 |       5 |       6 |       7 |       8 |      9 |      10 |      11 |       12 |      13 |      14 |      15 |      16 |      17 |     18 |      19 |      20 |      21 |      22 |      23 |      24 |       25 |      26 |      27 |         28 |     29 |
|---------+---------+---------+---------+---------+---------+---------+---------+---------+--------+---------+---------+----------+---------+---------+---------+---------+---------+--------+---------+---------+---------+---------+---------+---------+----------+---------+---------+------------+--------|
|   0.107 |   0.103 |   0.115 |   0.116 |   0.118 |   0.106 |   0.103 |   0.123 |   0.104 |   0.11 |   0.112 |   0.113 |   0.0973 |   0.119 |   0.108 |   0.115 |   0.121 |   0.111 |   0.11 |   0.109 |   0.112 |   0.104 |   0.113 |   0.108 |   0.121 |   0.0807 |   0.119 |   0.105 |   0.000734 |   0.1  |
|  24.45  |  23.47  |  26.99  |  27.14  |  27.81  |  24.32  |  23.48  |  29.48  |  23.8   |  25.59 |  26.08  |  26.31  |  21.77   |  28.22  |  24.85  |  27.08  |  28.9   |  25.65  |  25.58 |  25.22  |  26.04  |  23.68  |  26.49  |  24.83  |  28.66  |  17.2    |  28.22  |  24.14  |   1.03     |  22.68 |
|   0.01  |   0     |   0     |   0     |   0     |   0     |   0     |   0.01  |   0.01  |   0.01 |   0     |   0     |   0.01   |   0     |   0     |   0     |   0.01  |   0     |   0    |   0     |   0     |   0.01  |   0     |   0     |   0.01  |   0.01   |   0.01  |   0.01  |   0.74     |   0.01 |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan        | nan    |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan        | nan    |
| nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan      | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan        | nan    |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Supervised learning of blocks [5] **********
SAVING FOLDER FOR SUP:  IMG_4C_CL
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1578
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1578
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[3, 4, 5, 6]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3716
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3716
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3716
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Epoch: [1/50]	lr: 1.00e-03	time: 00:04:53	Loss_train 13.85807	Acc_train 69.32	/	Loss_test 7.38417	Acc_test 78.14
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [10/50]	lr: 1.00e-03	time: 00:08:06	Loss_train 2.29598	Acc_train 91.03	/	Loss_test 6.29452	Acc_test 84.92
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [20/50]	lr: 2.50e-04	time: 00:11:37	Loss_train 0.13021	Acc_train 98.93	/	Loss_test 5.65968	Acc_test 85.61
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [30/50]	lr: 1.25e-04	time: 00:15:09	Loss_train 0.01442	Acc_train 99.79	/	Loss_test 5.34644	Acc_test 86.25
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [40/50]	lr: 3.13e-05	time: 00:18:40	Loss_train 0.00232	Acc_train 99.94	/	Loss_test 5.21484	Acc_test 85.87
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [50/50]	lr: 7.81e-06	time: 00:22:12	Loss_train 0.00103	Acc_train 99.97	/	Loss_test 5.17000	Acc_test 85.87
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
RESULT:  {'train_loss': 0.0010270359925925732, 'train_acc': 99.97040033340454, 'test_loss': 5.1699981689453125, 'test_acc': 85.8681869506836, 'convergence': 23.3701229095459, 'R1': 9, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [3, 4, 5, 6]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [3, 4, 5, 6]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}
IN R2:  {'R1': {'train_loss': 1.5158293535932899e-06, 'train_acc': 99.99741315841675, 'test_loss': 3.727627992630005, 'test_acc': 88.36151123046875, 'convergence': 23.796390533447266, 'R1': 7, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [0, 1, 2, 8]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [0, 1, 2, 8]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}, 'R2': {'train_loss': 0.0010270359925925732, 'train_acc': 99.97040033340454, 'test_loss': 5.1699981689453125, 'test_acc': 85.8681869506836, 'convergence': 23.3701229095459, 'R1': 9, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [3, 4, 5, 6]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [3, 4, 5, 6]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 4, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 Model IMG_4C_CL loaded successfuly with best perf



 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=4, bias=True)
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1538
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1538
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 2, 8]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3862
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3862
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3862
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Accuracy of the network on the 1st dataset: 32.835 %
Test loss on the 1st dataset: 50.311

