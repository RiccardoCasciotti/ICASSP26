BLOCKS:  {'b0': {'arch': 'CNN', 'preset': 'softkrotov-c48-k5-p2-s1-d1-b0-t1.1-lr0.08', 'operation': 'batchnorm2d', 'num': 0, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5}}, 'b1': {'arch': 'CNN', 'preset': 'softkrotov-c192-k3-p1-s1-d1-b0-t0.7-lr0.01', 'operation': 'batchnorm2d', 'num': 1, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3}}, 'b2': {'arch': 'CNN', 'preset': 'softkrotov-c768-k3-p1-s1-d1-b0-t0.5-lr0.01', 'operation': 'batchnorm2d', 'num': 2, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 0.7}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3}}, 'b3': {'arch': 'CNN', 'preset': 'softkrotov-c3072-k3-p1-s1-d1-b0-t0.4-lr0.01', 'operation': 'batchnorm2d', 'num': 3, 'batch_norm': False, 'pool': {'type': 'max', 'kernel_size': 4, 'stride': 2, 'padding': 1}, 'activation': {'function': 'triangle', 'param': 1.4}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3}}, 'b4': {'arch': 'CNN', 'preset': 'softkrotov-c12288-k3-p1-s1-d1-b0-t0.25-lr0.01', 'operation': 'batchnorm2d', 'num': 4, 'batch_norm': False, 'pool': {'type': 'avg', 'kernel_size': 2, 'stride': 2, 'padding': 0}, 'activation': {'function': 'triangle', 'param': 1.0}, 'resume': None, 'layer': {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'positive', 'weight_init_range': 2, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3}}, 'b5': {'arch': 'MLP', 'preset': 'BP-c1000', 'operation': 'flatten', 'num': 5, 'att_dropout': None, 'dropout': 0.5, 'layer': {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.25, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 1000}, 'pool': None, 'activation': None}}
CL:  True
{'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 10, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True}
CL:  True
{'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 10, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 4, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=4, bias=True)

 ********** Hebbian Unsupervised learning of blocks [0] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.39e-01	time: 00:00:49	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:6.515e-03/SW:4.187e-01/MR:3.287e+00/SR:1.547e+00/MeD:1.174e+00/MaD:3.863e+00/MW:0.709/MAW:0.291
|       0 |       1 |       2 |       3 |       4 |       5 |      6 |      7 |         8 |       9 |         10 |      11 |      12 |      13 |      14 |     15 |         16 |       17 |     18 |      19 |      20 |      21 |      22 |      23 |      24 |         25 |      26 |        27 |       28 |      29 |
|---------+---------+---------+---------+---------+---------+--------+--------+-----------+---------+------------+---------+---------+---------+---------+--------+------------+----------+--------+---------+---------+---------+---------+---------+---------+------------+---------+-----------+----------+---------|
|   0.103 |   0.138 |   0.186 |   0.136 |   0.147 |   0.122 |   0.16 |   0.15 |   0.00581 |   0.186 |   0.000907 |   0.163 |   0.138 |   0.153 |   0.135 |   0.2  |   2.43e-05 |   0.0297 |   0.19 |   0.164 |   0.238 |   0.189 |   0.131 |   0.266 |   0.196 |   2.66e-05 |   0.233 |   0.00238 |   0.0051 |   0.273 |
|   2.4   |   3.06  |   4.07  |   3.03  |   3.24  |   2.75  |   3.52 |   3.31 |   1.03    |   4.08  |   1        |   3.59  |   3.07  |   3.37  |   3     |   4.39 |   1        |   1.27   |   4.16 |   3.61  |   5.28  |   4.15  |   2.93  |   5.95  |   4.3   |   1        |   5.16  |   1.01    |   1.03   |   6.13  |
|   0.82  |   0.65  |   0.58  |   0.74  |   1.63  |   2.49  |   1.11 |   1.09 |   1.64    |   0.58  |   2.96     |   0.86  |   0.91  |   0.64  |   1.87  |   0.69 |  18.14     |   0.89   |   0.97 |   1.43  |   0.97  |   1.47  |   0.76  |   0.72  |   0.77  |  24.44     |   0.84  |   1.9     |   0.92   |   0.69  |
| nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan    | nan       | nan     | nan        | nan     | nan     | nan     | nan     | nan    | nan        | nan      | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan       | nan      | nan     |
| nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan    | nan       | nan     | nan        | nan     | nan     | nan     | nan     | nan    | nan        | nan      | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan       | nan      | nan     |
| nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan    | nan       | nan     | nan        | nan     | nan     | nan     | nan     | nan    | nan        | nan      | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan       | nan      | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [1] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.39e-01	time: 00:01:33	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:7.255e-03/SW:3.123e-01/MR:6.268e+00/SR:1.697e+00/MeD:1.345e+00/MaD:5.162e+00/MW:0.539/MAW:0.461
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |      11 |       12 |       13 |       14 |       15 |       16 |        17 |       18 |       19 |       20 |       21 |       22 |      23 |       24 |       25 |       26 |       27 |      28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+-----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+---------+----------|
|   0.0331 |   0.0238 |   0.0454 |   0.0383 |   0.0333 |   0.0289 |   0.0287 |   0.0456 |   0.0289 |   0.0356 |   0.0348 |   0.038 |   0.0279 |   0.0388 |   0.0418 |   0.0319 |   0.0403 |   0.00185 |   0.0356 |   0.0262 |   0.0316 |   0.0294 |   0.0231 |   0.033 |   0.0334 |   0.0306 |   0.0334 |   0.0355 |   0.045 |   0.0228 |
|   5.93   |   4.18   |   8.52   |   6.99   |   5.98   |   5.11   |   5.07   |   8.56   |   5.11   |   6.44   |   6.28   |   6.92  |   4.92   |   7.09   |   7.72   |   5.7    |   7.41   |   1.11    |   6.44   |   4.61   |   5.63   |   5.21   |   4.06   |   5.91  |   6      |   5.44   |   5.98   |   6.41   |   8.43  |   4      |
|   0.75   |   0.66   |   0.19   |   0.68   |   0.28   |   1.24   |   0.44   |   0.42   |   0.3    |   0.26   |   1.55   |   0.26  |   0.52   |   0.45   |   0.29   |   0.3    |   0.41   |   3.92    |   0.28   |   0.61   |   0.42   |   0.3    |   0.39   |   0.26  |   0.23   |   0.38   |   1.55   |   0.3    |   0.4   |   0.42   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [2] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.08e-01	time: 00:02:16	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.565e-03/SW:2.838e-01/MR:1.156e+01/SR:2.332e+00/MeD:1.794e+00/MaD:1.048e+01/MW:0.558/MAW:0.442
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |      11 |       12 |       13 |       14 |       15 |      16 |       17 |       18 |       19 |       20 |       21 |       22 |       23 |       24 |       25 |      26 |       27 |      28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+---------+----------|
|   0.0829 |   0.0516 |   0.0568 |   0.0618 |   0.0303 |   0.0698 |   0.0666 |   0.0558 |   0.0616 |   0.0703 |   0.0531 |   0.069 |   0.0461 |   0.0644 |   0.0609 |   0.0579 |   0.054 |   0.0441 |   0.0537 |   0.0541 |   0.0695 |   0.0498 |   0.0588 |   0.0616 |   0.0755 |   0.0588 |   0.053 |   0.0486 |   0.059 |   0.0629 |
|  17.78   |   9.92   |  11.13   |  12.35   |   5.39   |  14.35   |  13.52   |  10.9    |  12.3    |  14.47   |  10.26   |  14.14  |   8.66   |  12.98   |  12.12   |  11.39   |  10.48  |   8.24   |  10.4    |  10.5    |  14.27   |   9.5    |  11.61   |  12.3    |  15.82   |  11.62   |  10.23  |   9.23   |  11.65  |  12.6    |
|   0.04   |   0.12   |   0.12   |   0.08   |   0.16   |   0.05   |   0.07   |   0.07   |   0.11   |   0.05   |   0.07   |   0.04  |   0.11   |   0.11   |   0.07   |   0.09   |   0.09  |   0.14   |   0.14   |   0.09   |   0.06   |   0.09   |   0.19   |   0.09   |   0.06   |   0.11   |   0.17  |   0.1    |   0.07  |   0.05   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [3] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 7.77e-02	time: 00:03:05	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:4.716e-04/SW:2.037e-01/MR:1.652e+01/SR:3.734e+00/MeD:2.928e+00/MaD:1.551e+01/MW:0.595/MAW:0.405
|        0 |        1 |        2 |        3 |      4 |        5 |        6 |       7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |       17 |       18 |      19 |       20 |      21 |       22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+--------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------|
|   0.0449 |   0.0892 |   0.0904 |   0.0864 |   0.07 |   0.0659 |   0.0849 |   0.061 |   0.0941 |   0.0754 |   0.0723 |   0.0697 |   0.0701 |   0.0814 |   0.0667 |   0.0195 |   0.0805 |   0.0707 |   0.0605 |   0.061 |   0.0825 |   0.103 |   0.0748 |   0.0527 |   0.0733 |   0.0704 |   0.0833 |   0.0724 |   0.0768 |   0.0745 |
|   8.42   |  19.49   |  19.83   |  18.73   |  14.4  |  13.35   |  18.33   |  12.15  |  20.86   |  15.79   |  14.98   |  14.31   |  14.42   |  17.38   |  13.56   |   3.43   |  17.12   |  14.57   |  12.03   |  12.14  |  17.67   |  23.3   |  15.63   |  10.17   |  15.24   |  14.49   |  17.89   |  15      |  16.15   |  15.55   |
|   0.1    |   0.01   |   0.01   |   0.02   |   0.04 |   0.07   |   0.03   |   0.05  |   0.01   |   0.03   |   0.02   |   0.02   |   0.04   |   0.02   |   0.05   |   0.1    |   0.01   |   0.03   |   0.03   |   0.03  |   0.03   |   0     |   0.04   |   0.05   |   0.02   |   0.03   |   0.04   |   0.03   |   0.01   |   0.02   |
| nan      | nan      | nan      | nan      | nan    | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan    | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan    | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [4] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 5.83e-02	time: 00:04:21	Acc_train 0.00	Acc_test 0.00	convergence: 2.39e+01	R1: 8	Info MB:0.000e+00/SB:0.000e+00/MW:4.399e-06/SW:1.509e-01/MR:2.489e+01/SR:3.230e+00/MeD:1.787e+00/MaD:2.389e+01/MW:0.682/MAW:0.318
|       0 |      1 |       2 |       3 |       4 |       5 |       6 |       7 |       8 |       9 |      10 |      11 |      12 |      13 |      14 |      15 |      16 |      17 |     18 |      19 |      20 |       21 |      22 |      23 |      24 |       25 |      26 |      27 |      28 |      29 |
|---------+--------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+--------+---------+---------+----------+---------+---------+---------+----------+---------+---------+---------+---------|
|   0.115 |   0.12 |   0.108 |   0.111 |   0.112 |   0.109 |   0.107 |   0.123 |   0.109 |   0.117 |   0.114 |   0.104 |   0.101 |   0.111 |   0.105 |   0.111 |   0.114 |   0.105 |   0.11 |   0.105 |   0.111 |   0.0983 |   0.111 |   0.115 |   0.114 |   0.0839 |   0.112 |   0.119 |   0.112 |   0.105 |
|  26.96  |  28.6  |  24.74  |  25.89  |  26.14  |  25.21  |  24.48  |  29.31  |  25.13  |  27.59  |  26.71  |  23.85  |  22.77  |  25.73  |  24.09  |  25.67  |  26.7   |  23.87  |  25.34 |  24     |  25.88  |  22.06   |  25.69  |  27.06  |  26.66  |  18.06   |  25.98  |  28.14  |  26.21  |  23.98  |
|   0.01  |   0    |   0     |   0     |   0     |   0     |   0     |   0.01  |   0     |   0     |   0     |   0     |   0.01  |   0     |   0     |   0     |   0     |   0     |   0    |   0     |   0.01  |   0.02   |   0     |   0     |   0     |   0.01   |   0     |   0.01  |   0     |   0.01  |
| nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan      | nan     | nan     | nan     | nan      | nan     | nan     | nan     | nan     |
| nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan      | nan     | nan     | nan     | nan      | nan     | nan     | nan     | nan     |
| nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan      | nan     | nan     | nan     | nan      | nan     | nan     | nan     | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Supervised learning of blocks [5] **********
SAVING FOLDER FOR SUP:  IMG_4C_CL
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Epoch: [1/50]	lr: 1.00e-03	time: 00:04:53	Loss_train 7.49061	Acc_train 68.03	/	Loss_test 5.08420	Acc_test 73.46
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [10/50]	lr: 1.00e-03	time: 00:08:11	Loss_train 1.94100	Acc_train 89.77	/	Loss_test 5.81053	Acc_test 83.34
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [20/50]	lr: 2.50e-04	time: 00:11:45	Loss_train 0.08204	Acc_train 99.23	/	Loss_test 5.00983	Acc_test 84.59
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [30/50]	lr: 1.25e-04	time: 00:15:19	Loss_train 0.01593	Acc_train 99.73	/	Loss_test 4.54488	Acc_test 85.08
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [40/50]	lr: 3.13e-05	time: 00:18:52	Loss_train 0.00143	Acc_train 99.95	/	Loss_test 4.66648	Acc_test 85.15
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [50/50]	lr: 7.81e-06	time: 00:22:34	Loss_train 0.00054	Acc_train 99.99	/	Loss_test 4.68926	Acc_test 84.52
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
RESULT:  {'train_loss': 0.0005385730182752013, 'train_acc': 99.98643398284912, 'test_loss': 4.689259052276611, 'test_acc': 84.52455139160156, 'convergence': 23.887409210205078, 'R1': 8, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [1, 3, 4, 7]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [1, 3, 4, 7]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}
IN R1:  {'R1': {'train_loss': 0.0005385730182752013, 'train_acc': 99.98643398284912, 'test_loss': 4.689259052276611, 'test_acc': 84.52455139160156, 'convergence': 23.887409210205078, 'R1': 8, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [1, 3, 4, 7]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [1, 3, 4, 7]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 4, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 Model IMG_4C_CL loaded successfuly with best perf



 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=4, bias=True)

 ********** Hebbian Unsupervised learning of blocks [0] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1530
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1530
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3870
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.18e-01	time: 00:00:45	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:3.864e-03/SW:3.546e-01/MR:2.840e+00/SR:1.180e+00/MeD:9.562e-01/MaD:2.420e+00/MW:0.747/MAW:0.253
|        0 |       1 |       2 |       3 |       4 |        5 |       6 |        7 |         8 |       9 |         10 |      11 |      12 |      13 |      14 |      15 |         16 |      17 |      18 |      19 |      20 |     21 |       22 |      23 |      24 |         25 |      26 |         27 |        28 |      29 |
|----------+---------+---------+---------+---------+----------+---------+----------+-----------+---------+------------+---------+---------+---------+---------+---------+------------+---------+---------+---------+---------+--------+----------+---------+---------+------------+---------+------------+-----------+---------|
|   0.0879 |   0.129 |   0.184 |   0.148 |   0.117 |   0.0487 |   0.146 |   0.0523 |   0.00116 |   0.191 |   0.000363 |   0.141 |   0.112 |   0.157 |   0.153 |   0.167 |   5.21e-06 |   0.213 |   0.168 |   0.129 |   0.188 |   0.17 |   0.0868 |   0.237 |   0.146 |   6.74e-06 |   0.179 |   0.000553 |   0.00128 |   0.187 |
|   2.13   |   2.89  |   4.04  |   3.27  |   2.65  |   1.52   |   3.23  |   1.57   |   1       |   4.2   |   1        |   3.13  |   2.56  |   3.46  |   3.37  |   3.66  |   1        |   4.69  |   3.7   |   2.89  |   4.12  |   3.73 |   2.12   |   5.26  |   3.24  |   1        |   3.93  |   1        |   1       |   4.11  |
|   0.56   |   0.53  |   0.52  |   0.53  |   0.49  |   0.58   |   0.56  |   0.76   |   1.26    |   0.52  |   4.23     |   0.49  |   0.53  |   0.52  |   0.54  |   0.49  |  29.46     |   0.51  |   0.51  |   0.48  |   0.54  |   0.52 |   0.58   |   0.57  |   0.49  |  32.52     |   0.43  |   4.3      |   1.23    |   0.48  |
| nan      | nan     | nan     | nan     | nan     | nan      | nan     | nan      | nan       | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     | nan    | nan      | nan     | nan     | nan        | nan     | nan        | nan       | nan     |
| nan      | nan     | nan     | nan     | nan     | nan      | nan     | nan      | nan       | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     | nan    | nan      | nan     | nan     | nan        | nan     | nan        | nan       | nan     |
| nan      | nan     | nan     | nan     | nan     | nan      | nan     | nan      | nan       | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan        | nan     | nan     | nan     | nan     | nan    | nan      | nan     | nan     | nan        | nan     | nan        | nan       | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [1] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1530
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1530
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3870
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.18e-01	time: 00:01:32	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.170e-02/SW:2.248e-01/MR:4.450e+00/SR:1.447e+00/MeD:1.181e+00/MaD:3.448e+00/MW:0.615/MAW:0.385
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |      13 |       14 |       15 |       16 |         17 |      18 |       19 |       20 |       21 |       22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+------------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------|
|   0.0225 |   0.0339 |   0.0314 |   0.0303 |   0.0269 |   0.0276 |   0.0302 |   0.0272 |   0.0223 |   0.0335 |   0.0224 |   0.0184 |   0.0241 |   0.026 |   0.0238 |   0.0279 |   0.0303 |   9.19e-05 |   0.022 |   0.0178 |   0.0161 |   0.0188 |   0.0132 |   0.0165 |   0.0299 |   0.0196 |   0.0317 |   0.0289 |   0.0355 |   0.0163 |
|   3.94   |   6.09   |   5.61   |   5.38   |   4.74   |   4.86   |   5.37   |   4.79   |   3.92   |   6      |   3.94   |   3.26   |   4.24   |   4.58  |   4.18   |   4.92   |   5.39   |   1        |   3.85  |   3.16   |   2.89   |   3.32   |   2.45   |   2.94   |   5.31   |   3.46   |   5.66   |   5.12   |   6.41   |   2.92   |
|   0.41   |   0.39   |   0.25   |   0.33   |   0.25   |   0.21   |   0.31   |   0.61   |   0.22   |   0.19   |   0.24   |   0.31   |   0.29   |   0.31  |   0.25   |   0.29   |   0.31   |  13.81     |   0.24  |   0.45   |   0.39   |   0.24   |   0.32   |   0.23   |   0.22   |   0.28   |   0.34   |   0.27   |   0.17   |   0.22   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan        | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan        | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan        | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [2] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1530
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1530
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3870
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.08e-01	time: 00:02:16	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:3.761e-03/SW:2.088e-01/MR:8.410e+00/SR:2.146e+00/MeD:1.663e+00/MaD:7.409e+00/MW:0.606/MAW:0.394
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |       17 |       18 |       19 |       20 |       21 |       22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------|
|   0.0602 |   0.0352 |   0.0534 |   0.0552 |   0.0514 |   0.0568 |   0.0492 |   0.0451 |   0.0524 |   0.0578 |   0.0392 |   0.0596 |   0.0521 |   0.0481 |   0.0495 |   0.0458 |   0.0586 |   0.0446 |   0.0514 |   0.0503 |   0.0454 |   0.0268 |   0.0468 |   0.0458 |   0.0452 |   0.0538 |   0.0383 |   0.0344 |   0.0545 |   0.0533 |
|  11.94   |   6.35   |  10.34   |  10.76   |   9.87   |  11.15   |   9.37   |   8.45   |  10.1    |  11.38   |   7.17   |  11.81   |  10.02   |   9.11   |   9.44   |   8.6    |  11.56   |   8.34   |   9.87   |   9.62   |   8.52   |   4.71   |   8.82   |   8.61   |   8.48   |  10.42   |   6.99   |   6.2    |  10.6    |  10.32   |
|   0.08   |   0.12   |   0.07   |   0.08   |   0.11   |   0.08   |   0.1    |   0.07   |   0.12   |   0.08   |   0.06   |   0.05   |   0.03   |   0.11   |   0.1    |   0.08   |   0.04   |   0.05   |   0.07   |   0.06   |   0.09   |   0.09   |   0.11   |   0.09   |   0.19   |   0.09   |   0.28   |   0.09   |   0.07   |   0.06   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [3] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1530
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1530
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3870
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 6.40e-02	time: 00:03:05	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:7.926e-04/SW:1.624e-01/MR:1.306e+01/SR:3.450e+00/MeD:2.591e+00/MaD:1.205e+01/MW:0.623/MAW:0.377
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |       17 |       18 |       19 |       20 |       21 |      22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------|
|   0.0542 |   0.0792 |   0.0752 |   0.0715 |   0.0561 |   0.0655 |   0.0783 |   0.0571 |   0.0686 |   0.0681 |   0.0313 |   0.0608 |   0.0674 |   0.0668 |   0.0665 |   0.0208 |   0.0529 |   0.0498 |   0.0608 |   0.0565 |   0.0732 |   0.0842 |   0.059 |   0.0576 |   0.0683 |   0.0744 |   0.0641 |   0.0585 |   0.0666 |   0.0744 |
|  10.52   |  16.78   |  15.75   |  14.77   |  10.97   |  13.25   |  16.54   |  11.2    |  14.04   |  13.91   |   5.58   |  12.09   |  13.73   |  13.59   |  13.51   |   3.65   |  10.21   |   9.51   |  12.09   |  11.06   |  15.22   |  18.14   |  11.65  |  11.32   |  13.97   |  15.51   |  12.9    |  11.53   |  13.54   |  15.52   |
|   0.01   |   0.01   |   0.01   |   0.04   |   0.04   |   0.01   |   0.01   |   0.03   |   0.02   |   0.04   |   0.06   |   0.03   |   0.01   |   0.02   |   0.02   |   0      |   0.05   |   0.05   |   0.01   |   0.02   |   0.01   |   0.02   |   0.04  |   0      |   0.02   |   0.01   |   0.04   |   0.02   |   0.02   |   0.02   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [4] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1530
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1530
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3870
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 4.45e-02	time: 00:04:24	Acc_train 0.00	Acc_test 0.00	convergence: 2.36e+01	R1: 9	Info MB:0.000e+00/SB:0.000e+00/MW:4.601e-05/SW:1.500e-01/MR:2.456e+01/SR:4.407e+00/MeD:2.768e+00/MaD:2.356e+01/MW:0.662/MAW:0.338
|        0 |       1 |       2 |       3 |       4 |       5 |       6 |       7 |      8 |       9 |      10 |      11 |      12 |      13 |      14 |      15 |      16 |      17 |      18 |      19 |      20 |       21 |       22 |      23 |      24 |       25 |      26 |      27 |      28 |      29 |
|----------+---------+---------+---------+---------+---------+---------+---------+--------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+----------+----------+---------+---------+----------+---------+---------+---------+---------|
|   0.0997 |   0.115 |   0.114 |   0.113 |   0.117 |   0.109 |   0.108 |   0.116 |   0.11 |   0.104 |   0.116 |   0.102 |   0.102 |   0.116 |   0.109 |   0.114 |   0.123 |   0.108 |   0.111 |   0.102 |   0.115 |   0.0829 |   0.0192 |   0.107 |   0.115 |   0.0883 |   0.105 |   0.111 |   0.107 |   0.104 |
|  22.45   |  26.99  |  26.68  |  26.32  |  27.6   |  25.12  |  24.91  |  27.34  |  25.41 |  23.76  |  27.3   |  23.18  |  23.07  |  27.11  |  25.08  |  26.77  |  29.39  |  24.81  |  25.83  |  23.1   |  26.95  |  17.77   |   3.39   |  24.57  |  26.99  |  19.24   |  24.11  |  25.67  |  24.54  |  23.71  |
|   0.01   |   0.01  |   0     |   0     |   0     |   0     |   0     |   0.02  |   0    |   0.01  |   0     |   0     |   0     |   0     |   0     |   0     |   0.01  |   0     |   0     |   0     |   0     |   0.02   |   0.06   |   0.01  |   0     |   0      |   0     |   0.01  |   0     |   0     |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan     |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan     |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Supervised learning of blocks [5] **********
SAVING FOLDER FOR SUP:  IMG_4C_CL
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1530
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1530
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[2, 5, 6, 9]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3870
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3870
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3870
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Epoch: [1/50]	lr: 1.00e-03	time: 00:04:57	Loss_train 11.43516	Acc_train 75.87	/	Loss_test 6.00220	Acc_test 83.46
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [10/50]	lr: 1.00e-03	time: 00:08:18	Loss_train 1.56053	Acc_train 93.74	/	Loss_test 5.83013	Acc_test 88.50
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [20/50]	lr: 2.50e-04	time: 00:12:00	Loss_train 0.07205	Acc_train 99.42	/	Loss_test 4.28558	Acc_test 90.20
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [30/50]	lr: 1.25e-04	time: 00:15:45	Loss_train 0.00315	Acc_train 99.96	/	Loss_test 4.32760	Acc_test 90.07
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [40/50]	lr: 3.13e-05	time: 00:19:30	Loss_train 0.00064	Acc_train 99.98	/	Loss_test 4.39179	Acc_test 89.61
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
Epoch: [50/50]	lr: 7.81e-06	time: 00:23:16	Loss_train 0.00033	Acc_train 99.99	/	Loss_test 4.33236	Acc_test 89.80
STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
RESULT:  {'train_loss': 0.00033290780265815556, 'train_acc': 99.98966455459595, 'test_loss': 4.332359313964844, 'test_acc': 89.80392456054688, 'convergence': 23.556373596191406, 'R1': 9, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [2, 5, 6, 9]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [2, 5, 6, 9]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}
IN R2:  {'R1': {'train_loss': 0.0005385730182752013, 'train_acc': 99.98643398284912, 'test_loss': 4.689259052276611, 'test_acc': 84.52455139160156, 'convergence': 23.887409210205078, 'R1': 8, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [1, 3, 4, 7]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [1, 3, 4, 7]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}, 'R2': {'train_loss': 0.00033290780265815556, 'train_acc': 99.98966455459595, 'test_loss': 4.332359313964844, 'test_acc': 89.80392456054688, 'convergence': 23.556373596191406, 'R1': 9, 'dataset_sup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 32, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 50, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [2, 5, 6, 9]}, 'dataset_unsup': {'name': 'ImageNette', 'noise_std': 0, 'channels': 3, 'width': 160, 'height': 160, 'validation_split': 0.2, 'training_sample': 9469, 'testing_sample': 10000, 'out_channels': 4, 'num_workers': 0, 'seed': 0, 'shuffle': True, 'batch_size': 10, 'augmentation': False, 'zca_whitened': False, 'training_class': 'all', 'split': 'train', 'px': 160, 'nb_epoch': 1, 'print_freq': 10, 'validation': False, 'continual_learning': True, 'old_dataset_size': 160, 'n_classes': 4, 'selected_classes': [2, 5, 6, 9]}, 'train_config': {'t0': {'blocks': [0], 'mode': 'unsupervised', 'lr': 0.08, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't2': {'blocks': [1], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't4': {'blocks': [2], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't6': {'blocks': [3], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't8': {'blocks': [4], 'mode': 'unsupervised', 'lr': 0.01, 'nb_epoch': 1, 'batch_size': 10, 'print_freq': 10}, 't10': {'blocks': [5], 'mode': 'supervised', 'lr': 0.001, 'nb_epoch': 50, 'batch_size': 32, 'print_freq': 10}}}}
SEED:  0
block 0, size : 48 80 80
range = 2.886751345948129
block 1, size : 192 40 40
range = 1.2028130608117202
block 2, size : 768 20 20
range = 0.6014065304058601
block 3, size : 3072 10 10
range = 0.30070326520293006
block 4, size : 12288 5 5
range = 0.15035163260146503
range = 0.03125
The device used will be: 
True
cuda:0
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.08, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 1.1, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 2, 'weight_init': 'normal', 'weight_init_range': 2.886751345948129, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 48, 'kernel_size': 5, 'in_channels': 3, 'lr_scheduler': {'lr': 0.08, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.7, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 1.2028130608117202, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 192, 'kernel_size': 3, 'in_channels': 48, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.5, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.6014065304058601, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 768, 'kernel_size': 3, 'in_channels': 192, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.4, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.30070326520293006, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 3072, 'kernel_size': 3, 'in_channels': 768, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'CNN', 'nb_train': None, 'lr': 0.01, 'adaptive': True, 'lr_sup': 0.001, 'speed': 7, 'lr_div': 96, 'lebesgue_p': 2, 'padding_mode': 'reflect', 'pre_triangle': False, 'ranking_param': 3, 'delta': 2, 't_invert': 0.25, 'groups': 1, 'stride': 1, 'dilation': 1, 'beta': 1, 'power': 4.5, 'padding': 1, 'weight_init': 'normal', 'weight_init_range': 0.15035163260146503, 'weight_init_offset': 0, 'mask_thsd': 0, 'radius': 25, 'power_lr': 0.75, 'weight_decay': 0, 'soft_activation_fn': 'exp', 'hebbian': True, 'resume': None, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'softness': 'softkrotov', 'out_channels': 12288, 'kernel_size': 3, 'in_channels': 3072, 'lr_scheduler': {'lr': 0.01, 'adaptive': True, 'nb_epochs': 1, 'ratio': 0.0010560777273207309, 'speed': 7, 'div': 96, 'decay': 'linear', 'power_lr': 0.75}}
CONFIG: {'arch': 'MLP', 'lr': 0.05, 'adaptive': True, 'lr_sup': 0.001, 'speed': 0.4, 'lr_div': 100, 'lebesgue_p': 2, 't_invert': 10, 'beta': 0.01, 'power': 4.5, 'ranking_param': 3, 'delta': 0.1, 'hebbian': False, 'add_bias': False, 'normalize_inp': False, 'lr_decay': 'linear', 'seed': 0, 'lr_bias': 600, 'softness': 'soft', 'soft_activation_fn': 'exp', 'plasticity': 'SoftHebb', 'metric_mode': 'unsupervised', 'weight_init': 'positive', 'weight_init_range': 0.03125, 'weight_init_offset': 0, 'weight_decay': 0, 'radius': 10, 'power_lr': 0.2, 'out_channels': 4, 'in_channels': 307200, 'old_channels': 12288, 'lr_scheduler': {'decay': 'cste', 'lr': 0.1}}

 Model IMG_4C_CL loaded successfuly with best perf



 ----- Architecture Block BatchNorm2dSK3482(5, 5)1.100000023841858reflect, number 0 -----
- BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3, 48, lebesgue_p=2, pruning=0, kernel_size=(5, 5), bias=False, padding_mode=reflect, t_invert=1.100000023841858, bias=False, lr_bias=0.0909, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK481922(3, 3)0.699999988079071reflect, number 1 -----
- BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(48, 192, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.699999988079071, bias=False, lr_bias=0.1429, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK1927682(3, 3)0.5reflect, number 2 -----
- BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(192, 768, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.5, bias=False, lr_bias=0.2, ranking_param=3, delta=2, activation=exp)
- Triangle(power=0.7)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK76830722(3, 3)0.4000000059604645reflect, number 3 -----
- BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(768, 3072, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.4000000059604645, bias=False, lr_bias=0.25, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.4)
- MaxPool2d(kernel_size=4, stride=2, padding=1, dilation=1, ceil_mode=False)

 ----- Architecture Block BatchNorm2dSK3072122882(3, 3)0.25reflect, number 4 -----
- BatchNorm2d(3072, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
- HebbSoftKrotovConv2d(3072, 12288, lebesgue_p=2, pruning=0, kernel_size=(3, 3), bias=False, padding_mode=reflect, t_invert=0.25, bias=False, lr_bias=0.4, ranking_param=3, delta=2, activation=exp)
- Triangle(power=1.0)
- AvgPool2d(kernel_size=2, stride=2, padding=0)

 ----- Architecture Block FlattenDropout(p=0.5, inplace=False)Linear(in_, number 5 -----
- Flatten(start_dim=1, end_dim=-1)
- Dropout(p=0.5, inplace=False)
- Linear(in_features=307200, out_features=4, bias=True)

 ********** Hebbian Unsupervised learning of blocks [0] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.22e-01	time: 00:00:43	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:8.361e-03/SW:3.668e-01/MR:2.917e+00/SR:1.271e+00/MeD:1.030e+00/MaD:3.118e+00/MW:0.717/MAW:0.283
|        0 |       1 |       2 |       3 |       4 |        5 |       6 |         7 |          8 |       9 |         10 |      11 |      12 |      13 |      14 |      15 |        16 |     17 |      18 |      19 |      20 |      21 |       22 |      23 |      24 |         25 |      26 |         27 |         28 |      29 |
|----------+---------+---------+---------+---------+----------+---------+-----------+------------+---------+------------+---------+---------+---------+---------+---------+-----------+--------+---------+---------+---------+---------+----------+---------+---------+------------+---------+------------+------------+---------|
|   0.0803 |   0.109 |   0.193 |   0.121 |   0.184 |   0.0801 |   0.134 |   0.00323 |   0.000801 |   0.177 |   0.000632 |   0.176 |   0.136 |   0.156 |   0.132 |   0.137 |   0.00057 |   0.19 |   0.218 |   0.143 |   0.192 |   0.152 |   0.0722 |   0.269 |   0.181 |   5.39e-06 |   0.179 |   1.97e-06 |   0.000805 |   0.185 |
|   2      |   2.51  |   4.23  |   2.73  |   4.03  |   2      |   2.98  |   1.01    |   1        |   3.87  |   1        |   3.87  |   3.02  |   3.44  |   2.94  |   3.05  |   1       |   4.17 |   4.82  |   3.17  |   4.21  |   3.35  |   1.87   |   6.04  |   3.96  |   1        |   3.92  |   1        |   1        |   4.05  |
|   0.61   |   0.59  |   0.58  |   0.58  |   0.55  |   0.57   |   0.61  |   1.35    |   1.72     |   0.53  |   3.01     |   0.59  |   0.58  |   0.61  |   0.62  |   0.51  |   4.04    |   0.59 |   0.59  |   0.54  |   0.58  |   0.55  |   0.63   |   0.64  |   0.58  |  34.75     |   0.45  |  25.88     |   1.72     |   0.49  |
| nan      | nan     | nan     | nan     | nan     | nan      | nan     | nan       | nan        | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan       | nan    | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan        | nan     | nan        | nan        | nan     |
| nan      | nan     | nan     | nan     | nan     | nan      | nan     | nan       | nan        | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan       | nan    | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan        | nan     | nan        | nan        | nan     |
| nan      | nan     | nan     | nan     | nan     | nan      | nan     | nan       | nan        | nan     | nan        | nan     | nan     | nan     | nan     | nan     | nan       | nan    | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan        | nan     | nan        | nan        | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [1] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.22e-01	time: 00:01:28	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:1.041e-02/SW:1.917e-01/MR:3.781e+00/SR:1.276e+00/MeD:1.016e+00/MaD:3.054e+00/MW:0.619/MAW:0.381
|        0 |        1 |        2 |        3 |        4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |      16 |         17 |       18 |        19 |       20 |       21 |        22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+------------+----------+-----------+----------+----------+-----------+----------+----------+----------+----------+----------+----------+----------|
|   0.0126 |   0.0196 |   0.0298 |   0.0245 |   0.0213 |   0.0267 |   0.0306 |   0.0348 |   0.0184 |   0.0247 |   0.0191 |   0.0183 |   0.0158 |   0.0217 |   0.0167 |   0.0241 |   0.029 |   4.56e-05 |   0.0182 |   0.00985 |   0.0187 |   0.0187 |   0.00883 |   0.0168 |   0.0203 |   0.0189 |   0.0234 |   0.0188 |   0.0228 |   0.0185 |
|   2.36   |   3.45   |   5.29   |   4.3    |   3.73   |   4.7    |   5.43   |   6.27   |   3.26   |   4.33   |   3.36   |   3.25   |   2.83   |   3.81   |   2.99   |   4.22   |   5.13  |   1        |   3.22   |   1.98    |   3.3    |   3.31   |   1.85    |   3      |   3.58   |   3.34   |   4.1    |   3.32   |   4      |   3.27   |
|   0.5    |   0.47   |   0.21   |   0.3    |   0.22   |   0.15   |   0.24   |   0.28   |   0.19   |   0.2    |   0.24   |   0.18   |   0.35   |   0.23   |   0.28   |   0.27   |   0.18  |  13.76     |   0.21   |   0.45    |   0.23   |   0.26   |   0.26    |   0.17   |   0.22   |   0.28   |   0.44   |   0.24   |   0.22   |   0.24   |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan        | nan      | nan       | nan      | nan      | nan       | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan        | nan      | nan       | nan      | nan      | nan       | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan        | nan      | nan       | nan      | nan      | nan       | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [2] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 1.08e-01	time: 00:02:11	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:5.307e-03/SW:1.897e-01/MR:7.560e+00/SR:2.257e+00/MeD:1.742e+00/MaD:6.559e+00/MW:0.557/MAW:0.443
|        0 |        1 |        2 |        3 |       4 |        5 |        6 |        7 |        8 |        9 |       10 |       11 |       12 |       13 |       14 |       15 |       16 |       17 |       18 |       19 |      20 |       21 |       22 |       23 |       24 |       25 |       26 |       27 |       28 |       29 |
|----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------|
|   0.0581 |   0.0344 |   0.0495 |   0.0455 |   0.053 |   0.0546 |   0.0469 |   0.0237 |   0.0451 |   0.0303 |   0.0378 |   0.0535 |   0.0372 |   0.0433 |   0.0496 |   0.0468 |   0.0525 |   0.0397 |   0.0477 |   0.0416 |   0.033 |   0.0077 |   0.0479 |   0.0341 |   0.0451 |   0.0469 |   0.0363 |   0.0236 |   0.0455 |   0.0474 |
|  11.43   |   6.19   |   9.44   |   8.54   |  10.25  |  10.61   |   8.85   |   4.15   |   8.46   |   5.38   |   6.89   |  10.35   |   6.75   |   8.07   |   9.45   |   8.82   |  10.13   |   7.29   |   9.03   |   7.68   |   5.92  |   1.71   |   9.07   |   6.13   |   8.45   |   8.85   |   6.57   |   4.14   |   8.54   |   8.97   |
|   0.08   |   0.11   |   0.11   |   0.08   |   0.1   |   0.09   |   0.1    |   0.08   |   0.09   |   0.12   |   0.08   |   0.07   |   0.09   |   0.1    |   0.11   |   0.08   |   0.09   |   0.08   |   0.09   |   0.12   |   0.08  |   0.18   |   0.15   |   0.06   |   0.08   |   0.1    |   0.18   |   0.11   |   0.12   |   0.1    |
| nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |
| nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [3] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 5.88e-02	time: 00:02:58	Acc_train 0.00	Acc_test 0.00	convergence: 2.40e+01	R1: 0	Info MB:0.000e+00/SB:0.000e+00/MW:8.940e-04/SW:1.480e-01/MR:1.183e+01/SR:3.394e+00/MeD:2.492e+00/MaD:1.083e+01/MW:0.586/MAW:0.414
|        0 |        1 |        2 |        3 |        4 |        5 |         6 |        7 |       8 |        9 |       10 |       11 |     12 |      13 |       14 |       15 |       16 |       17 |       18 |       19 |       20 |       21 |       22 |       23 |       24 |       25 |        26 |       27 |       28 |      29 |
|----------+----------+----------+----------+----------+----------+-----------+----------+---------+----------+----------+----------+--------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+-----------+----------+----------+---------|
|   0.0688 |   0.0622 |   0.0624 |   0.0573 |   0.0637 |   0.0702 |   0.00731 |   0.0683 |   0.012 |   0.0695 |   0.0378 |   0.0611 |   0.06 |   0.074 |   0.0631 |   0.0209 |   0.0661 |   0.0471 |   0.0711 |   0.0474 |   0.0576 |   0.0738 |   0.0672 |   0.0709 |   0.0795 |   0.0765 |   0.00319 |   0.0505 |   0.0567 |   0.073 |
|  14.09   |  12.43   |  12.49   |  11.26   |  12.8    |  14.44   |   1.66    |  13.96   |   2.28  |  14.27   |   6.89   |  12.17   |  11.9  |  15.41  |  12.67   |   3.67   |  13.42   |   8.91   |  14.66   |   8.97   |  11.33   |  15.37   |  13.67   |  14.63   |  16.86   |  16.09   |   1.22    |   9.66   |  11.12   |  15.15  |
|   0.01   |   0.03   |   0.02   |   0.03   |   0.01   |   0.01   |   0.12    |   0.01   |   0.06  |   0.03   |   0.01   |   0.03   |   0.02 |   0.02  |   0.03   |   0      |   0.01   |   0.03   |   0.01   |   0.03   |   0.03   |   0.02   |   0.02   |   0.01   |   0.02   |   0.03   |   0.16    |   0.03   |   0.03   |   0.02  |
| nan      | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan     | nan      | nan      | nan      | nan    | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan      | nan     |
| nan      | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan     | nan      | nan      | nan      | nan    | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan      | nan     |
| nan      | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan     | nan      | nan      | nan      | nan    | nan     | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan      | nan       | nan      | nan      | nan     |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models

 ********** Hebbian Unsupervised learning of blocks [4] **********
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([10, 3, 160, 160])
SAVING FOLDER FOR UNSUP:  IMG_4C_CL
INSIDE EVALUATE UNSUP
INSIDE EVALUATE UNSUP RETURNED 0,0
Epoch: [1/1]	lr: 4.03e-02	time: 00:04:15	Acc_train 0.00	Acc_test 0.00	convergence: 2.24e+01	R1: 10	Info MB:0.000e+00/SB:0.000e+00/MW:1.787e-04/SW:1.436e-01/MR:2.339e+01/SR:4.786e+00/MeD:3.195e+00/MaD:2.239e+01/MW:0.567/MAW:0.433
|        0 |       1 |       2 |       3 |       4 |       5 |       6 |       7 |      8 |       9 |      10 |      11 |      12 |      13 |      14 |      15 |      16 |      17 |      18 |      19 |      20 |      21 |       22 |      23 |      24 |       25 |      26 |      27 |      28 |       29 |
|----------+---------+---------+---------+---------+---------+---------+---------+--------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+----------+---------+---------+----------+---------+---------+---------+----------|
|   0.0973 |   0.101 |   0.109 |   0.124 |   0.089 |   0.108 |   0.118 |   0.101 |   0.1  |   0.109 |   0.112 |   0.105 |   0.103 |   0.102 |   0.108 |   0.108 |   0.101 |   0.107 |   0.111 |   0.103 |   0.122 |   0.078 |   0.0179 |   0.106 |   0.111 |   0.0802 |   0.106 |   0.103 |   0.112 |   0.0926 |
|  21.77   |  22.88  |  25.09  |  29.81  |  19.45  |  24.77  |  27.93  |  22.89  |  22.62 |  25.03  |  26.04  |  24     |  23.4   |  23.16  |  24.86  |  24.78  |  22.92  |  24.69  |  25.88  |  23.33  |  29.11  |  16.46  |   3.17   |  24.32  |  25.65  |  17.06   |  24.29  |  23.28  |  25.97  |  20.43   |
|   0      |   0.01  |   0.01  |   0     |   0.02  |   0.01  |   0     |   0.01  |   0.01 |   0.01  |   0     |   0     |   0.01  |   0.01  |   0     |   0     |   0.01  |   0     |   0     |   0     |   0     |   0     |   0.02   |   0.01  |   0     |   0.01   |   0     |   0.02  |   0     |   0.01   |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan      |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan      |
| nan      | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan    | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan     | nan      | nan     | nan     | nan      | nan     | nan     | nan     | nan      |

STORING PATH IS NONEEEEEE
SAVING THE MODEL
/g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/results/hebb/result/network/IMG_4C_CL/models
SEED:  0
BEFORE RESIZING
AFTER RESIZING
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
1609
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 1609
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/val
    Split: val
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
           )
------------------------
TARGETS BEFORE SUB:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
TARGETS AFTER SUB:  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 3, 4, 7]
TARGETS AFTER CLEANER:  tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
3685
<class 'dataset.ImageNette'>
Dataset ImageNette
    Number of datapoints: 3685
    Root location: /g100_work/EIRI_E_POLIMI/rcasciot/neuromodAI/SoftHebb-main/Training/data/imagenette2-160/train
    Split: train
    StandardTransform
Transform: Compose(
               Resize(size=(160, 160), interpolation=bilinear, max_size=None, antialias=warn)
               ToTensor()
               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
           )
------------------------
INDICES:  3685
IMAGE SIZE: torch.Size([32, 3, 160, 160])
Accuracy of the network on the 1st dataset: 29.770 %
Test loss on the 1st dataset: 48.399

